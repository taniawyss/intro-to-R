{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>Experiments designed to quantify gene expression often yield hundreds of genes that show statistically significant differences between two classes (two biological states, two phenotype states, two experimental conditions, etc).  Once differentially expressed genes are identified, enrichment analysis (EA) methods can be conducted to identify groups of genes (e.g. particular pathways) that are differentially expressed, and offer insights into biological mechanisms.  One example of such a method is the Gene Set Enrichment Analysis (GSEA), which is frequently used for high-throughput gene expression data analysis.</p> <p>This course will cover GSEA and alternative enrichment tools. Because most of their implementations are directly linked to databases that annotate the function of genes in the cell, the course will also give an overview of functional annotation databases such as the Gene Ontology.</p>"},{"location":"#learning-outcomes","title":"Learning outcomes","text":"<p>At the end of the course, the participants will be able to:</p> <ol> <li>Distinguish available enrichment analysis methods</li> <li>Apply GSEA and over-representation analysis using R</li> <li>Determine whether the genes of a GO term have a statistically significant difference in expression or not</li> <li>Learn where to find other gene sets in databases (e.g. KEGG, oncogenic gene sets) and use them in R</li> </ol>"},{"location":"#exercises","title":"Exercises","text":"<p>The course is divided into small blocks, each with a lecture and relevant practical exercises. We will comment the practical exercises at the end of each block.</p>"},{"location":"#asking-questions","title":"Asking questions","text":"<p>During lectures, you are encouraged to ask questions. Just unmute yourself and ask your questions or use the Zoom functionality. Find the buttons in the participants list (\u2018Participants\u2019 button):</p> <p>Alternatively, (depending on your zoom version or OS) use the \u2018Reactions\u2019 button:</p>"},{"location":"bonus_code/","title":"Bonus code","text":""},{"location":"bonus_code/#bonus-code","title":"Bonus code","text":"<p>The following code was added thanks to questions from course participants of past sessions. They might be useful for you too.</p>"},{"location":"bonus_code/#gene-label-conversions","title":"Gene label conversions","text":"<p>It is often useful to convert different types of gene labels even further. Here is an example for gene label conversion  and gene information extraction using biomaRt. A lot of information for each gene can be obtained, such as chromosome location, description, biotype, or the symbols of mouse homologs of human genes, etc.</p> <pre><code># install and load the package:\nBiocManager::install(\"biomaRt\")\nlibrary(biomaRt)\n# list the available options\nlistEnsembl()\n\nensembl &lt;- useEnsembl(biomart = \"genes\")\n\n# List the available species and reference genomes:\ndatasets &lt;- listDatasets(ensembl)\nhead(datasets)\n# search for human dataset and genome version:\ndatasets[grep(\"sapiens\", datasets$dataset),]\n# 80 hsapiens_gene_ensembl Human genes (GRCh38.p13) GRCh38.p13\n\n# To obtain information on human genes, first the data specific to human has to be accessed from the online Ensembl repository\nensembl &lt;- useEnsembl(biomart = \"genes\", dataset = \"hsapiens_gene_ensembl\")\n\n# you can extract gene biotype, description, wiki gene description,\n# chromosome location of genes, even strand information etc\n# using the listAttributes function allows you to view the type of information per gene you can extract.\nattributes &lt;- listAttributes(ensembl)\nattributes[1:15,]\n\n# Now we extract symbol (external_gene_name), description, gene_biotype (eg whether it is a protein coding or other type of gene):\nbiomart_gene_info &lt;- getBM(attributes=c(\"ensembl_gene_id\", \"external_gene_name\", \"description\", \"gene_biotype\", \"wikigene_description\"),\n                           filter=\"ensembl_gene_id\",\n                           values=NK_vs_Th$ensembl_gene_id,\n                           mart=ensembl)\n# check the structure of the resulting data frame:\nhead(biomart_gene_info)\n\n# search for the oncogene key word in the description:\nbiomart_gene_info[grep(\"oncogene\", biomart_gene_info$description),]\nbiomart_gene_info[grep(\"tumor protein\", biomart_gene_info$description),]\n\n# search for genes that have TP53 in their gene symbol:\nbiomart_gene_info[grep(\"TP53\", biomart_gene_info$external_gene_name),]\n</code></pre> <p>For conversion of human gene symbols to mouse homologs for example (or vice versa if you provide mouse genes as the \u201cvalues\u201d arguments                                                                     and \u201chsapiens_homolog_associated_gene_name\u201d in the list of the attributes argument), you can also use biomaRt.</p> <pre><code># Convert human genes to mouse homologs\nensembl_human_to_mouse &lt;- getBM(attributes=c(\"ensembl_gene_id\",\"external_gene_name\", \"mmusculus_homolog_associated_gene_name\"),\n                                filter=\"ensembl_gene_id\",\n                                values=NK_vs_Th$ensembl_gene_id,\n                                mart=ensembl)\nhead(ensembl_human_to_mouse)\n# ensembl_gene_id external_gene_name mmusculus_homolog_associated_gene_name\n# 1 ENSG00000000003             TSPAN6                                 Tspan6\n# 2 ENSG00000000419               DPM1                                   Dpm1\n# 3 ENSG00000000419               DPM1                                Gm20716\n# 4 ENSG00000000457              SCYL3                                  Scyl3\n# 5 ENSG00000000460           C1orf112                               BC055324\n# 6 ENSG00000000938                FGR                                    Fgr\n</code></pre>"},{"location":"bonus_code/#msigdbr-package","title":"msigdbr package","text":"<p>The msigdbr package hosted on CRAN allows to access gene set collections hosted on MSigDB directly within R. Check out its vignette to view how to download collections for other species such as mouse, zebra fish, horse, etc. The function <code>msigdbr_species()</code> allows you to list available species. </p> <p>For example, to download the Hallmark collection with human gene symbols within R: <pre><code>gmt &lt;- msigdbr::msigdbr(species = \"human\", category = \"H\")\n\n# Create the 2 column-format (TERM2GENE argument) required by clusterProfiler:\nh_gmt &lt;- gmt[,c(\"gs_name\", \"gene_symbol\")]\n</code></pre></p> <p>To determine what other species are available with msigdbr:</p> <pre><code>msigdbr_species()\n#&gt; # A tibble: 20 \u00d7 2\n#&gt;    species_name                    species_common_name                          \n#&gt;    &lt;chr&gt;                           &lt;chr&gt;                                        \n#&gt;  1 Anolis carolinensis             Carolina anole, green anole                  \n#&gt;  2 Bos taurus                      bovine, cattle, cow, dairy cow, domestic cat\u2026\n#&gt;  3 Caenorhabditis elegans          NA                                           \n#&gt;  4 Canis lupus familiaris          dog, dogs                                    \n#&gt;  5 Danio rerio                     leopard danio, zebra danio, zebra fish, zebr\u2026\n#&gt;  6 Drosophila melanogaster         fruit fly                                    \n#&gt;  7 Equus caballus                  domestic horse, equine, horse                \n#&gt;  8 Felis catus                     cat, cats, domestic cat                      \n#&gt;  9 Gallus gallus                   bantam, chicken, chickens, Gallus domesticus\n#&gt; 10 Homo sapiens                    human                                        \n#&gt; 11 Macaca mulatta                  rhesus macaque, rhesus macaques, Rhesus monk\u2026\n#&gt; 12 Monodelphis domestica           gray short-tailed opossum                    \n#&gt; 13 Mus musculus                    house mouse, mouse                           \n#&gt; 14 Ornithorhynchus anatinus        duck-billed platypus, duckbill platypus, pla\u2026\n#&gt; 15 Pan troglodytes                 chimpanzee                                   \n#&gt; 16 Rattus norvegicus               brown rat, Norway rat, rat, rats             \n#&gt; 17 Saccharomyces cerevisiae        baker's yeast, brewer's yeast, S. cerevisiae\n#&gt; 18 Schizosaccharomyces pombe 972h- NA                                           \n#&gt; 19 Sus scrofa                      pig, pigs, swine, wild boar                  \n#&gt; 20 Xenopus tropicalis              tropical clawed frog, western clawed frog\n</code></pre> <p>For example, we can download the Gene Ontology Biological Process (GO:BP) collection with yeast gene symbols. To first check the available collections with msigdbr, use ``msigdbr_collections()```. </p> <pre><code>print(msigdbr_collections(), n=20)\n# A tibble: 23 \u00d7 3\n#    gs_cat gs_subcat         num_genesets\n#    &lt;chr&gt;  &lt;chr&gt;                    &lt;int&gt;\n#  1 C1     \"\"                         299\n#  2 C2     \"CGP\"                     3384\n#  3 C2     \"CP\"                        29\n#  4 C2     \"CP:BIOCARTA\"              292\n#  5 C2     \"CP:KEGG\"                  186\n#  6 C2     \"CP:PID\"                   196\n#  7 C2     \"CP:REACTOME\"             1615\n#  8 C2     \"CP:WIKIPATHWAYS\"          664\n#  9 C3     \"MIR:MIRDB\"               2377\n# 10 C3     \"MIR:MIR_Legacy\"           221\n# 11 C3     \"TFT:GTRD\"                 518\n# 12 C3     \"TFT:TFT_Legacy\"           610\n# 13 C4     \"CGN\"                      427\n# 14 C4     \"CM\"                       431\n# 15 C5     \"GO:BP\"                   7658\n# 16 C5     \"GO:CC\"                   1006\n# 17 C5     \"GO:MF\"                   1738\n# 18 C5     \"HPO\"                     5071\n# 19 C6     \"\"                         189\n# 20 C7     \"IMMUNESIGDB\"             4872\n\n# Obtain the C5 category and GO:BP subcategory for yeast:\n\ngmt &lt;- msigdbr::msigdbr(species = \"Saccharomyces cerevisiae\", category = \"C5\", subcategory = \"GO:BP\")\n\n# We obtained the GO:BP gene sets, the yeast gene symbols, and yeast ensembl_id:\nhead(gmt[,c(\"gs_name\", \"gene_symbol\", \"ensembl_gene\")], n=10)\n# A tibble: 10 \u00d7 3\n# gs_name                                          gene_symbol ensembl_gene\n# &lt;chr&gt;                                            &lt;chr&gt;       &lt;chr&gt;       \n#   1 GOBP_10_FORMYLTETRAHYDROFOLATE_METABOLIC_PROCESS ADE3        YGR204W     \n# 2 GOBP_10_FORMYLTETRAHYDROFOLATE_METABOLIC_PROCESS ADE3        YGR204W     \n# 3 GOBP_10_FORMYLTETRAHYDROFOLATE_METABOLIC_PROCESS MIS1        YBR084W     \n# 4 GOBP_2FE_2S_CLUSTER_ASSEMBLY                     BOL2        YGL220W     \n# 5 GOBP_2FE_2S_CLUSTER_ASSEMBLY                     GRX4        YER174C     \n# 6 GOBP_2FE_2S_CLUSTER_ASSEMBLY                     GRX5        YPL059W     \n# 7 GOBP_2FE_2S_CLUSTER_ASSEMBLY                     JAC1        YGL018C     \n# 8 GOBP_2FE_2S_CLUSTER_ASSEMBLY                     NFS1        YCL017C     \n# 9 GOBP_2_OXOGLUTARATE_METABOLIC_PROCESS            ARO8        YGL202W     \n# 10 GOBP_2_OXOGLUTARATE_METABOLIC_PROCESS            ADH4        YGL256W    \n\n# If your DE genes are also labeled with gene symbol, create the 2 column-format (TERM2GENE argument) required by clusterProfiler for the GSEA() function for example:\ny_gmt &lt;- gmt[,c(\"gs_name\", \"gene_symbol\")]\n</code></pre> <p>We can also use the msigdbr package to download the KEGG collection, in case the <code>gseKEGG()</code> function of the clusterProfiler package is blocked by firewall issues.</p> <pre><code>### ---- KEGG with msigdbr download:\nmsigdbr_collections() # \n# C2     \"CP:KEGG\"      \nkegg_pw&lt;-msigdbr(species = \"human\", category = \"C2\", subcategory = \"CP:KEGG\")\n\nhead(kegg_pw[,c(\"gs_name\", \"gene_symbol\")])\n# # A tibble: 6 \u00d7 2\n# gs_name               gene_symbol\n# &lt;chr&gt;                 &lt;chr&gt;      \n#   1 KEGG_ABC_TRANSPORTERS ABCA1      \n# 2 KEGG_ABC_TRANSPORTERS ABCA10     \n# 3 KEGG_ABC_TRANSPORTERS ABCA12     \n# 4 KEGG_ABC_TRANSPORTERS ABCA13     \n# 5 KEGG_ABC_TRANSPORTERS ABCA2      \n# 6 KEGG_ABC_TRANSPORTERS ABCA3      \n\n# Run with GSEA function: \nkegg_gsea&lt;-GSEA(gl, eps = 0, TERM2GENE = kegg_pw[,c(\"gs_name\", \"gene_symbol\")], seed = TRUE)\nhead(kegg_gsea@result[,c(2:6)])\n#                                                                                   Description setSize enrichmentScore       NES       pvalue\n# KEGG_RIBOSOME                                                                   KEGG_RIBOSOME      86      -0.9016245 -3.534228 9.828038e-49\n# KEGG_NATURAL_KILLER_CELL_MEDIATED_CYTOTOXICITY KEGG_NATURAL_KILLER_CELL_MEDIATED_CYTOTOXICITY     104       0.6183274  2.509621 7.254908e-13\n# KEGG_REGULATION_OF_ACTIN_CYTOSKELETON                   KEGG_REGULATION_OF_ACTIN_CYTOSKELETON     170       0.4547466  1.980859 2.337476e-07\n# KEGG_CHEMOKINE_SIGNALING_PATHWAY                             KEGG_CHEMOKINE_SIGNALING_PATHWAY     161       0.4463380  1.928426 4.354445e-07\n# KEGG_FC_GAMMA_R_MEDIATED_PHAGOCYTOSIS                   KEGG_FC_GAMMA_R_MEDIATED_PHAGOCYTOSIS      87       0.5343886  2.100787 1.599037e-06\n# KEGG_B_CELL_RECEPTOR_SIGNALING_PATHWAY                 KEGG_B_CELL_RECEPTOR_SIGNALING_PATHWAY      70       0.5299578  1.993277 8.000155e-06\n\nkegg_gsea@result[grep(\"NATURAL_KILLER\", kegg_gsea@result$Description), c(2:6)]\n#                                     Description setSize enrichmentScore      NES       pvalue\n#  KEGG_NATURAL_KILLER_CELL_MEDIATED_CYTOTOXICITY     104       0.6183274 2.509621 7.254908e-13\n</code></pre>"},{"location":"bonus_code/#code-for-barplots-with-ggplot2","title":"Code for barplots with ggplot2","text":"<p>Barplot of the 10 most significant gene sets:</p> <p><pre><code>library(tidyverse)\n\nGO_NK_Th@result %&gt;%\n  dplyr::arrange(p.adjust) %&gt;%\n  slice_head(n = 10) %&gt;%\n  ggplot(aes(x = -log10(p.adjust), y = reorder(Description, -p.adjust))) +\n    geom_bar(stat = \"identity\") +\n    geom_vline(xintercept = -log10(0.05), linetype = \"dashed\") +\n    labs(y = \"Description\") +\n    theme_classic()\n</code></pre> </p> <p>Barplot of NES colored according to direction: <pre><code>sorted_GO_NK_Th %&gt;%\n  dplyr::group_by(color) %&gt;%\n  dplyr::arrange(desc(abs(NES))) %&gt;%\n  slice_head(n = 10) %&gt;%\n  ggplot(aes(x = NES, y = reorder(Description, NES), fill = color)) +\n  geom_bar(stat = \"identity\") +\n  geom_vline(xintercept = 0) +\n  labs(y = \"Description\") +\n  theme_classic() +\n  theme(legend.position = \"none\")\n</code></pre> </p>"},{"location":"bonus_code/#code-for-a-lollipop-plot-with-ggplot2","title":"Code for a lollipop plot with ggplot2","text":"<p>In this lollipop of GSEA results of leukocyte-related GO pathways, the color will represent up- (red) or down-regulated (blue) gene sets, the dot size represents the setSize. The length of the gene set description is truncated to 50 characters. We use the GSEA results that we obtained after selecting the leukocyte-related GO pathways at the end of exercise 3.</p> <pre><code># Bonus: lollipop plot of p-values of leukocyte-related GO pathways. The \n# color will represent up- (red) or down-regulated (blue) gene sets, \n# the dot size represents the setSize.\n# The length of the gene set description is truncated to 50 characters:\n\n# We use the GSEA results that we obtained after selecting the leukocyte-related GO pathways at the end of exercise 3\ndf &lt;- GO_NK_Th_selection@result\nhead(df[,1:8])\n#                    ID                       Description setSize enrichmentScore       NES       pvalue   p.adjust     qvalue\n# GO:0097529 GO:0097529       myeloid leukocyte migration     182       0.3358543  1.459329 0.0060333962 0.04957978 0.03849908\n# GO:0030595 GO:0030595              leukocyte chemotaxis     186       0.3314487  1.446607 0.0057064461 0.04766950 0.03701573\n# GO:0007159 GO:0007159      leukocyte cell-cell adhesion     335       0.2955485  1.381506 0.0037782543 0.03815146 0.02962490\n# GO:0001776 GO:0001776             leukocyte homeostasis      99      -0.3891370 -1.552210 0.0037570540 0.03812616 0.02960525\n# GO:0002685 GO:0002685 regulation of leukocyte migration     185       0.3418586  1.489716 0.0020160142 0.02593948 0.02014220\n# GO:0070661 GO:0070661           leukocyte proliferation     273       0.3247110  1.493837 0.0009132421 0.01545176 0.01199841\n\ndf$mycolor &lt;- ifelse(df$NES&lt;0, \"cornflowerblue\",\"indianred2\")\n\ndf &lt;- df[order(df$pvalue, decreasing = T),] #revert the order of the rows\ndf$Label &lt;-stringr::str_trunc(df$Description, 50, \"right\") # keep max 50 character in a string (nchar(\"string\") to count characters)\ndf$Label &lt;- factor(df$Label, levels = c(df$Label))\n\n# Use limits of the x-axis range according to the range of p.values:\nmax_x &lt;- round(max(-log10(df$p.adjust)), digits = 0) + 0.5\nxlimits &lt;- c(0, max_x)\nxbreaks &lt;- seq_along(0:max_x)\n\n# Create the plot:\np &lt;- ggplot(df, aes(x = Label, y = -log10(p.adjust), fill = mycolor)) +\n  geom_segment(aes(x = Label, xend = Label, y = 0, yend = -log10(p.adjust)),\n               color = df$mycolor, lwd = 1) +\n  geom_point(pch = 21,  bg = df$mycolor, aes(size=df$setSize), color=df$mycolor) + \n  scale_size(name = \"Number\\nof genes\") + \n  scale_y_continuous(name=expression(\"-\"*\"log\"[10]*\"(p-value)\"), \n                     limits=xlimits,\n                     breaks=xbreaks) +\n  scale_x_discrete(name=\"\") +\n  theme_bw(base_size=10, base_family = \"Helvetica\") +\n  theme(axis.text=element_text(size=12, colour = \"black\"),\n        axis.title=element_text(size=14)) +\n  ggtitle(\"Leukocyte-related GO pathways\") +\n  coord_flip()\n\np\n</code></pre> <p>You will obtain the following lollipop plot :</p>"},{"location":"bonus_code/#code-for-a-heatmap-of-p-values-with-ggplot2","title":"Code for a heatmap of p-values with ggplot2","text":"<p>For heatmaps, ggplot2 can also be used. Here is an example for a heatmap of the p-values of 6 different gene sets (gs), and the p-value for each gene set was calculated in two comparisons, so we compared the enrichment in genes differentially expressed between NK cells and Th cells, and between NK cells and CD8 T cells (note that this is a dummy example just to show you the                                                                       example of the code, it is not based on real RNA seq data). Before using ggplot2, you need to create a dataframe that contains a column with the gene set identities, a column with the  name of the cell type comparisons, and a column with the p-value of each gene set in each comparison. So a specific format is  required for ggplot2.</p> <pre><code># Create a data frame that contains the p-value for every gene set for every \n# cell type comparison. You need to include the values also for the non-significant\n# gene sets. If you use function of the clusterProfiler package, you will usually\n# obtain results in the @result slot only for significant gene sets. But if you need\n# p-values also for the non-significant gene sets, you can change the argument\n# pvalueCutoff = 1 in the gseGO function (and other functions of the clusterProfiler\n# package)\n\n# For the example, create a dummy data frame with the list of gene sets (gs), the\n# 2 cell type comparisons, and the p-value for each gene set in each comparison:\nora_to_plot&lt;-as.data.frame(cbind(ID=c(\"gs1\", \"gs2\",\"gs3\",\"gs4\", \"gs5\", \"gs6\",\n                                      \"gs1\", \"gs2\",\"gs3\",\"gs4\", \"gs5\", \"gs6\"),\n                                 comparison=c(rep(\"NK_vs_Th\",6), rep(\"NK_vs_CD8\",6)),\n                                 p_val=as.numeric(c(0.8,0.9,0.6, 0.054, 0.00001, 0.0003,\n                                                    0.0002, 0.004, 0.001,0.01, 0.85,0.9))))\n\n# transform the p-val to -log10(p-val):\nora_to_plot$log10_p_val&lt;--log10(as.numeric(ora_to_plot$p_val))\n# set the none-significant p-values to 0 so that they appear grey in the heatmap:\nora_to_plot$log10_p_val&lt;-ifelse(ora_to_plot$log10_p_val&lt;(-log10(0.05)), 0, ora_to_plot$log10_p_val)\nrange(ora_to_plot$log10_p_val) # [1]  0 5\n\nhead(ora_to_plot, n=12)\n#     ID comparison p_val log10_p_val\n# 1  gs1   NK_vs_Th   0.8    0.000000\n# 2  gs2   NK_vs_Th   0.9    0.000000\n# 3  gs3   NK_vs_Th   0.6    0.000000\n# 4  gs4   NK_vs_Th 0.054    0.000000\n# 5  gs5   NK_vs_Th 1e-05    5.000000\n# 6  gs6   NK_vs_Th 3e-04    3.522879\n# 7  gs1  NK_vs_CD8 2e-04    3.698970\n# 8  gs2  NK_vs_CD8 0.004    2.397940\n# 9  gs3  NK_vs_CD8 0.001    3.000000\n# 10 gs4  NK_vs_CD8  0.01    2.000000\n# 11 gs5  NK_vs_CD8  0.85    0.000000\n# 12 gs6  NK_vs_CD8   0.9    0.000000\n\n# create a palette of colors based on the Plasma palette (grDevices package)\nplot(1:20, 1:20, col=hcl.colors(20,\"Plasma\"), pch=15, cex=3)\nhcl.colors(9,\"Plasma\")# \"RdYlGn\")\nbreaks&lt;-seq(from=0, to=5, by=0.5 )\n\ncolor&lt;-c(\"grey78\", rev(hcl.colors(9,\"Plasma\")))\n\n# create plot and export as png:\np&lt;-ggplot(ora_to_plot, aes(comparison, ID, fill= log10_p_val)) + \n  geom_tile(color = \"black\") +\n  scale_fill_gradientn(breaks= breaks, \n                       colors = color) +\n  theme_bw() \nggsave(plot = p, filename = \"heatmap_p_value_ORA.png\", \n       device=\"png\",\n       width = 4,height = 6)\n</code></pre> <p>You will obtain the following heatmap:</p>"},{"location":"bonus_code/#small-information-on-a-typical-rnaseq-workflow","title":"Small information on a typical RNAseq workflow","text":"<p>Download pdf</p>"},{"location":"bonus_code/#example-for-de-analysis-with-deseq2","title":"Example for DE analysis with DESeq2","text":"<p>Download data Download script</p> <pre><code># DGE example with DESeq2:\n# R version 4.1.2 (2021-11-01)\n\n\nBiocManager::install(\"DESeq2\")\nlibrary(DESeq2) # v 1.34.0\n\n# setwd(\"path/to/downloadedData\")\n\ncounts_NK_Th&lt;-read.csv(\"htseq_counts_NK_Th.csv\", row.names = 1, header = T)\n\ncounts_NK_Th&lt;-counts_NK_Th[-c(which(rowSums(counts_NK_Th)==0)),]\ndim(counts_NK_Th)\n# [1] 38573    15\n\n# build a sample metadata table:\ncoldata&lt;-as.data.frame(cbind(cell_type=c(rep(\"NK\", 6),\n                           rep(\"Th\", 9)),\n               donor=sapply(strsplit(colnames(counts_NK_Th), \"_\"), '[',1),\n               sample_id=colnames(counts_NK_Th)))\ncoldata$cell_type&lt;-as.factor(coldata$cell_type)\ncoldata$cell_type&lt;-factor(coldata$cell_type,\n                          levels=levels(coldata$cell_type)[c(2,1)])\n\nhead(coldata)\n#   cell_type donor         sample_id\n# 1        NK   S15    S15_NK_CD56dim\n# 2        NK   S15 S15_NK_CD56bright\n# 3        NK   S16    S16_NK_CD56dim\n# 4        NK   S16 S16_NK_CD56bright\n# 5        NK   S17    S17_NK_CD56dim\n# 6        NK   S17 S17_NK_CD56bright\n\n# Create DESeq object:\ndds &lt;- DESeqDataSetFromMatrix(countData = counts_NK_Th,\n                              colData = coldata,\n                              design= ~ donor + cell_type) # Difference between cell types, accounting for the sample pairing\ndds &lt;- DESeq(dds)\nresultsNames(dds) # lists the coefficients\n# [1] \"Intercept\"          \"donor_S16_vs_S15\"   \"donor_S17_vs_S15\"   \"cell_type_NK_vs_Th\"\n\ndeseq2_NK_vs_Th &lt;- as.data.frame(results(dds,  \n                                         alpha=0.05, \n                                         contrast=c(\"cell_type\",\"NK\",\"Th\"),\n                                 cooksCutoff=F)) # use cooksCutoff=F only if some genes of interest do not have a calculated p-value\n                                                # author recomendation is to use default cooksCutoff=T    \n\nhead(deseq2_NK_vs_Th)\n#            baseMean log2FoldChange     lfcSE        stat       pvalue         padj\n# TSPAN6     40.851111     -6.9583034 1.1044621 -6.30017417 2.973114e-10 8.742152e-09\n# TNMD        0.104281     -0.1228379 3.1336380 -0.03919977 9.687311e-01           NA\n# DPM1     2566.964652     -0.1466129 0.2211112 -0.66307338 5.072836e-01 7.133950e-01\n# SCYL3     571.791633      0.5728065 0.4039864  1.41788547 1.562242e-01 3.515869e-01\n# C1orf112  201.504414      0.8758449 0.5938469  1.47486651 1.402484e-01 3.263445e-01\n# FGR      8793.900467      8.5188295 1.2025099  7.08420757 1.398422e-12 5.868549e-11\n\ndeseq2_NK_vs_Th[grep(\"CPS1\", rownames(deseq2_NK_vs_Th)),]\n#            baseMean log2FoldChange    lfcSE        stat     pvalue      padj\n# CPS1     2.34916186    -3.56324252 1.855768 -1.92009033 0.05484649 0.1702518\n# CPS1.IT1 0.09375824    -0.08381473 3.134376 -0.02674048 0.97866673        NA\ndeseq2_NK_vs_Th[grep(\"GZMB\", rownames(deseq2_NK_vs_Th)),]\n#      baseMean log2FoldChange     lfcSE     stat       pvalue        padj\n# GZMB 27758.47       9.075387 0.8897603 10.19981 1.986563e-24 2.65665e-22\n</code></pre>"},{"location":"course_schedule/","title":"Course schedule","text":"<p>The course starts at 9am and ends around 5pm, with the following breaks (approximate times, please allow for some flexibility):</p> Topic 9am Start of course 10:30am to 10:50am Coffee break 12:30pm to 1:30pm Lunch break 3:30pm to 3:50pm Coffee break Approx. 5pm End of course"},{"location":"exercises/","title":"Exercises","text":"<p>In this section, you will find the R code that we will use during the course. We will explain the code and output during correction of the exercises.</p>"},{"location":"exercises/#source-of-data","title":"Source of data","text":"<p>We will work with RNA sequencing data generated by Ercolano et al 2020. This study described the transcriptomes of immune cells that are circulating in the blood of humans in healthy conditions. Different types of immune cells circulate in human blood. In this study, 2 cell types were included: Natural Killer (NK) cells and CD4+ T helper (Th) cells. These 2 types of cells have different functions: NK cells provide a rapid response in the innate immune response at the beginning of an infection such as by a virus, and are able to kill virus-infected cells by secreting cytotoxic molecules; Th cells have an important role in the adaptive immune response by aiding antigen-presenting cells by secreting different panels of cytokines depending on the type of pathogen infecting the host. Here we perform enrichment analysis using the genes that are differentially expressed between NK cells and Th cells.</p> <p>The RNA sequencing data that we provide includes the results of a differential gene expression analysis comparing NK cells to Th cells. The differential gene expression analysis was performed using limma (see Useful links page).</p> <p>Before starting the exercises, set the working directory to where you have downloaded and unzipped the data folder with the files for the exercises  and load the necessary packages. Also, set the seed so that results are replicable.</p> <p>Warning</p> <p>When using <code>setwd()</code>, change the path within quotes to where you have saved the data for the exercises</p> <pre><code># Change the path here:\nsetwd(\"/path/to/whereDataFolderIsSaved/\")\n\nlibrary(clusterProfiler)\nlibrary(enrichplot)\nlibrary(pathview)\nlibrary(org.Hs.eg.db)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(msigdbr)\n\nlibrary(tidyverse) # for bonus code/dplyr/pipe\n\n# set seed\nset.seed(1234)\n</code></pre>"},{"location":"exercises/#exercise-1-over-representation-analysis","title":"Exercise 1 - Over-representation analysis","text":"<p>Import the data into your R session and explore its structure: what are the different columns corresponding to? How can you search for a particular gene within this table?</p> <pre><code># Import DE table:\nNK_vs_Th&lt;-read.csv(\"data/NK_vs_Th_diff_gene_exercise_1.csv\",\n                   header = T)\n\n# Look at the structure of the data.frame:\nhead(NK_vs_Th)\n\n# Search for a gene symbol in the data.frame, eg NCAM1 (CD56)\nNK_vs_Th[which(NK_vs_Th$symbol==\"NCAM1\"),]\n</code></pre> <p>This table contains the typical information obtained after differential gene expression analysis. For each gene, you have log<sub>2</sub> fold change values and significance information via the raw p-value and adjusted p-value. A positive log<sub>2</sub> fold change value indicates that the gene is more expressed in NK cells than in Th cells, while a negative log<sub>2</sub> fold change value indicates that the gene is less expressed in NK cells than in Th cells. The p-value is usually computed automatically by R packages designed for differential gene expression analysis such as edgeR, limma or DESeq2. If you ever need to perform p-value adjustment, there is a function that is part of the stats package called p.adjust(), that allows you to perform p-value adjustment for any list of p-values. Look at the help of the function and try to understand the arguments that can be used.  <pre><code>?p.adjust\n</code></pre></p> <p>We can compare the raw p-value and adjusted p-value for any gene. Raw p-values that are close to 0.05 will often become higher than 0.05 after adjustment, while very small p-values more likely remain below 0.05 after adjustment. Search for 2 genes in the data.frame, CPS1 and GZMB, and verify the effect of adjustment on their p-values. Are both genes still significant after adjustment?</p> Answer <pre><code>NK_vs_Th[which(NK_vs_Th$symbol==\"CPS1\"),]\n\nNK_vs_Th[which(NK_vs_Th$symbol==\"GZMB\"),] \n</code></pre> <p>If we expect a particular group (or set) of genes to be altered between 2 conditions, we can specifically test for this using a single Fisher test, i.e an over-representation analysis. Here, because we compared cells that are involved in the innate immune response (NK cells) to cells involved in the adaptive immune response (Th cells), we expect that there are differences in genes involved in the adaptive immune response. Which direction do you think the adaptive immune response genes should have? Rather up-regulated in NK or down-regulated in NK vs Th cells?</p> <p>As you will see later in the course, there are databases available where you can obtain gene sets. We have obtained the Gene Ontology adaptive immune response gene set from the MSigDB resource. Import the list of genes included in this gene set, and determine, using a Fisher test, whether the genes up-regulated in Th cells (i.e. down-regulated in NK cells) are enriched in the adaptive immune response. </p> <pre><code># Import the adaptive immune response gene set (gmt file)\nadaptive&lt;-clusterProfiler::read.gmt(\"data/GOBP_ADAPTIVE_IMMUNE_RESPONSE.v7.5.1.gmt\")\nnrow(adaptive) # 719\nView(adaptive)\n</code></pre> <p>RNA sequencing analysis often involves filtering genes to remove lowly expressed genes. Therefore, it is possible that not all genes that are part of a gene set are  found in your RNA seq dataset. Check how many genes in the RNA-seq data set are found in the adaptive immune response gene set.</p> <pre><code>length(which(NK_vs_Th$symbol %in% adaptive$gene)) # 513\n</code></pre> <p>To perform a Fisher\u2019s exact test, we need to build a contingency table of the number of genes that are up-regulated or not significant in Th cells, and that are part or not of the gene set of interest. First, count the number of genes up-regulated in Th cells (i.e. down-regulated in NK cells), then the number of not significant genes, then determine for each type of genes whether they are part of the adaptive immune response gene set or not.</p> Answer <pre><code># Extract the number of genes up-regulated in Th (i.e. down-regulated in NK):\nTh_up&lt;-subset(NK_vs_Th, \nNK_vs_Th$p.adj&lt;=0.05&amp;NK_vs_Th$logFC&lt;0)\n# Are these genes part of the gene set?            \nsummary(Th_up$symbol %in% adaptive$gene)\n#    Mode   FALSE    TRUE \n# logical    1753     142 \ntable(Th_up$symbol %in% adaptive$gene)\n\n# Extract the number of not significant genes:\nTh_not_DE&lt;-subset(NK_vs_Th, NK_vs_Th$p.adj&gt;0.05)\n# Are these genes part of the gene set?            \nsummary(Th_not_DE$symbol %in% adaptive$gene)\n#    Mode   FALSE    TRUE \n# logical   16344     289\n</code></pre> <p>Next, build a contingency table that has the following format:</p> Up-reg. Not up-reg. In gene set # # Not in gene set # # <p>Finally, use the <code>fisher.test()</code> function to determine whether the adaptive immune response is over-represented among the genes up-regulated in Th cells. If you don\u2019t know how to use the `fisher.test() function, remember to use the help:</p> <pre><code>?fisher.test()\n</code></pre> Answer <pre><code># There are several ways to build the contigency table:\n# 1: by hand:\ncont.table&lt;-matrix(c(142, 1753, 289, 16344), ncol=2,byrow = F)\ncont.table\n\n# 2: by using the individual values of the table() function:\ncont.table&lt;-matrix(c(unlist(table(Th_up$symbol %in% adaptive$gene))[[2]],\nunlist(table(Th_up$symbol %in% adaptive$gene))[[1]], \nunlist(table(Th_not_DE$symbol %in% adaptive$gene))[[2]], \nunlist(table(Th_not_DE$symbol %in% adaptive$gene))[[1]]), \nncol=2, byrow = F)\ncont.table\n\n# 3: by using the 2 rows (reversed) of the table() function:\ncont.table&lt;-matrix(c(rev(unlist(table(Th_up$symbol %in% adaptive$gene))), \nrev(unlist(table(Th_not_DE$symbol %in% adaptive$gene)))), \nncol=2, byrow = F)\ncont.table\n\n# Add row and colum names so that you know what each number corresponds to:\ncolnames(cont.table)&lt;-c(\"up\", \"not_up\")\nrownames(cont.table)&lt;-c(\"in_set\", \"not_in_set\")\ncont.table\n#              up   not_up\n# in_set      142      289\n# not_in_set 1753    16344\n\n# Compare the proportions: \n142/(142+1753)\n289/(289+16344)\n\n# Run fisher test:\nfisher.test(cont.table)\n# Fisher's Exact Test for Count Data\n# data:  cont.table\n# p-value &lt; 2.2e-16\n# alternative hypothesis: true odds ratio is not equal to 1\n# 95 percent confidence interval:\n#  3.697701 5.654348\n# sample estimates:\n# odds ratio \n#   4.580549 \n</code></pre> <p>In case you wish to run an over-representation analysis for several gene sets at once, instead of running several independent Fisher tests, you can use the <code>enricher()</code> function of the clusterProfiler package. This function allows you to perform an over-representation analysis of several gene sets at once, using an implementation of the hypergeometric test (a one-sided Fisher\u2019s exact test). Check out the help of the function: What arguments do you need to provide? </p> <p>Determine whether the genes up-regulated in NK cells are over-represented in 3 gene sets: the adaptive immune response gene set used above, another related to cell activation, and one un-related to immune cells (hair cell differentiation).</p> <pre><code># Help: hypergeometric test (like one-sided Fisher test = greater)\n?enricher()\n\n# Test 3 gene sets among the genes up-regulated in NK cells,\n# with enricher()\n# First, obtain the genes up-regulated in NK:\n\nnk_up_genes&lt;-subset(NK_vs_Th, NK_vs_Th$logFC&gt;0&amp;NK_vs_Th$p.adj&lt;=0.05)$symbol\n\n# Import 2 other gene sets, 1 un-related to immune cells:\nhair&lt;-read.gmt(\"data/GOBP_HAIR_CELL_DIFFERENTIATION.v7.5.1.gmt\")\ndim(hair)\ncell_active&lt;-read.gmt(\"data/GOBP_CELL_ACTIVATION.v7.5.1.gmt\")\ndim(cell_active)\n\n# Combine the 3 gene sets into a single data.frame for the TERM2GENE argument:\ngenesets3&lt;-rbind(adaptive, hair, cell_active)\n\nhyper_3genesets&lt;-enricher(gene=nk_up_genes,\n                      universe = NK_vs_Th$symbol,\n                      TERM2GENE = genesets3,\n                      maxGSSize = 1000)\nView(hyper_3genesets@result)\n</code></pre> <p>Bonus How would you represent the over-representation result for the adaptive immune response? An option might be a volcano plot coloring genes that are part of the gene set  and significant using ggplot2.</p> <pre><code>library(ggplot2)\nlibrary(ggrepel)\n\nsig_genes&lt;-subset(NK_vs_Th, NK_vs_Th$symbol %in% adaptive$gene &amp; NK_vs_Th$p.adj&lt;=0.05)\nsig_genes_label&lt;-subset(sig_genes, sig_genes$p.adj&lt;=0.00001)\n\nggplot(NK_vs_Th, aes(x = logFC,  # \n                     y = -log10(p.adj))) +\n        geom_point(color=\"grey87\")  +\n        ggtitle(\"Genes belonging to the adaptive immune response gene set\") +\n        theme_bw() +\n        geom_text_repel(data = sig_genes_label, \n                        aes(x=logFC,\n                            y=-log10(p.adj),label=symbol),\n                        max.overlaps = 20) +\n        geom_point(data=sig_genes, col=\"dodgerblue2\") +\n        theme(legend.position = \"none\") +\n        scale_x_continuous(name = expression(\"log\"[2]*\"(fold change), NK vs Th cells\")) +\n        scale_y_continuous(name = expression(\"-\"*\"log\"[10]*\"(adj. p-value)\")) +\n        geom_hline(yintercept = -log10(0.05), linetype=\"dashed\") +\n        geom_vline(xintercept = 0, linetype=\"dashed\")\n</code></pre>"},{"location":"exercises/#exercise-2-gene-set-enrichment-analysis-gsea","title":"Exercise 2 - Gene set enrichment analysis (GSEA)","text":"<p>Next, we will use functions of the clusterProfiler package to perform a gene set enrichment analysis (GSEA) of Gene Ontology terms. For this, we first need to create a vector with the t-statistic of each gene, assign the gene symbol to each t-statistic in the vector (i.e. names), then sort the vector.</p> <p>Warning</p> <p>A single gene can be labeled with different types of gene labels: Ensembl IDs, NCBI Entrez IDs, gene symbols, UniProt IDs, etc.      Therefore, first check whether the way the genes are labeled is supported by clusterProfiler using:     <pre><code>  idType(OrgDb = \"org.Hs.eg.db\") # to determine allowed gene id type\n</code></pre></p> <p>Create the named and sorted vector of t-statistics (i.e. for the geneList argument of the <code>gseGO()</code> function). </p> <pre><code>gl&lt;-NK_vs_Th$t\nnames(gl)&lt;-make.names(NK_vs_Th$symbol, unique = T)\ngl&lt;-gl[order(gl, decreasing = T)]\n\nGO_NK_Th&lt;-gseGO(gl, ont=\"BP\",\n                OrgDb = org.Hs.eg.db,\n                keyType = \"SYMBOL\",\n                minGSSize=30,\n                eps=0,\n                seed=T)\n</code></pre> <p>Explore the new object that was created. What is its structure? What does it contain? Is the adaptive immune response gene set significant? How many gene sets are down- or up-regulated?</p> Answer <pre><code>    class(GO_NK_Th)\n    str(GO_NK_Th)\n    View(GO_NK_Th@result)\n\n    GO_NK_Th@result[GO_NK_Th@result$Description==\"adaptive immune response\",]\n    summary(GO_NK_Th@result$p.adjust&lt;0.05&amp;GO_NK_Th@result$NES&lt;0)\n  # Mode     FALSE    TRUE \n  # logical    320      63 \n\n  summary(GO_NK_Th@result$p.adjust&lt;0.05&amp;GO_NK_Th@result$NES&gt;0)\n  #     Mode   FALSE    TRUE \n  # logical       63     320 \n</code></pre> <p>Among the results, some gene sets seem to be a bit redundant based on the genes they contain (column \u201ccore_enrichment\u201d). We can simplify the results by using the <code>simplify()</code> function of the clusterProfiler package:</p> <p><pre><code># Simplify:\n?clusterProfiler::simplify\nGO_NK_Th_simplify &lt;- clusterProfiler::simplify(GO_NK_Th)\nView(GO_NK_Th_simplify@result)\nGO_NK_Th_simplify@result[GO_NK_Th_simplify@result$Description==\"adaptive immune response\",]\n</code></pre> Finally, you can export the results to a csv file, if you would want to summarize the results using Revigo for example (see later in course). To obtain the list of leading edge genes, split the corresponding column in the <code>@result</code> by using the slash. And if you want to obtain a full list of genes belonging to a particular GO term, this information is also stored in the <code>@geneSets</code> slot.</p> <pre><code># Export results\nwrite.csv(GO_NK_Th@result, \"GO_GSEA_NK_vs_Th.csv\",\n          row.names = F, quote = F)\n\n# How to obtain the list of leading edge genes for a gene set:\nunlist(strsplit(GO_NK_Th@result[GO_NK_Th@result$Description==\"adaptive immune response\",11],\n                \"\\\\/\"))\n\n# How to obtain the list of all genes included in a GO term:\nGO_NK_Th@geneSets$`GO:0002250`\n</code></pre> <p>As you will see later in the course, objects of type <code>enrichResult</code> or <code>gseaResult</code> generated by <code>clusterProfiler</code> functions can be used directly in some visualization functions. Therefore, you could save your full output object also to allow for easy visualization later.</p> <pre><code># export full object\nsaveRDS(GO_NK_Th, \"GO_NK_Th.rds\")\n\n# import a saved object:\nGO_NK_Th&lt;-readRDS(\"GO_NK_Th.rds\")\n</code></pre> <p>Bonus In the context of single-cell RNA sequencing data for example, single-cells are clustered, and marker genes per cluster are obtained. In this case, we don\u2019t always obtain a t-statistic or fold change value for every gene in the dataset, but rather a simple list of significant genes. With this list, you can perform an over-representation analysis of the GO terms using <code>enrichGO()</code>. The output will not contain enrichment scores, but rather p-values for every gene set.</p> <pre><code>nk_up_genes&lt;-subset(NK_vs_Th, NK_vs_Th$logFC&gt;0&amp;NK_vs_Th$p.adj&lt;=0.05)$symbol\n\n# Provide list of significant genes for over-representation analysis of GO gene sets \n# using enrichGO():\nGO_enrich&lt;-enrichGO(gene=nk_up_genes,\n                    OrgDb = org.Hs.eg.db,\n                    keyType = \"SYMBOL\",\n                    # ont=\"BP\",\n                    ont=\"MF\", # ont=\"MF\" is the default\n                    minGSSize = 30,\n universe=NK_vs_Th$symbol) # may bug with barplot below if added, depending on version\nView(GO_enrich@result)\n\n# Check the class of the objects created:\nclass(GO_enrich)\n# [1] \"enrichResult\"\n# attr(,\"package\")\n# [1] \"DOSE\"\nclass(GO_NK_Th)\n# [1] \"gseaResult\"\n# attr(,\"package\")\n# [1] \"DOSE\"\n</code></pre> <p>This method can also be used if you have a list of genes involved in a disease, such as genes that are mutated in cancer, or lists of genes obtained by other omics methods, such as genes that have a transcription factor binding site in their promoter (ChIP-seq), etc.</p>"},{"location":"exercises/#exercise-3-visualization-of-enrichment-results","title":"Exercise 3 - Visualization of enrichment results","text":"<p>Once we have performed a GSEA or over-representation analysis, we need of course to show the results and prepare figures for a publication. Several visualizations are possible. The first option is a barplot. It can be a barplot of p-values of top over-represented GO terms. P-values are usually -log<sub>10</sub>-transformed, so that the very small p-values are emphasized compared to p-values that are closer to 0.05. The barplot() function comes from the graphics package. </p> <pre><code>par(mar=c(5,20,3,3))\nbarplot(rev(-log10(GO_NK_Th@result$p.adjust[1:10])),\n        horiz = T, names=rev(GO_NK_Th@result$Description[1:10]),\n        las=2, xlab=\"-log10(adj.p-value)\",\n        cex.names = 0.7,\n        col=\"lightgreen\") \nabline(v=-log10(0.05))\n</code></pre> <p>In publications, we often see barplots of normalized enrichment scores (NES), showing which gene sets are up-regulated and which are down-regulated.</p> <p>Now that you know how to use the <code>barplot()</code> function, how would you create a barplot of NES of the top 10 up-regulated and the top 10 down-regulated genes sets,  with red bars for the up-regulated gene sets and blue bars for the down-regulated gene sets?</p> Answer <p><pre><code>    # Barplot of NES of the top GO gene sets, with different color for up- or down-reg gene sets:\n    sorted_GO_NK_Th&lt;- GO_NK_Th@result[order(GO_NK_Th@result$NES, decreasing = F),]\n    sorted_GO_NK_Th$color&lt;-ifelse(sorted_GO_NK_Th$NES&lt;0, \"red\", \"darkblue\")\n\n    par(mar=c(5,20,3,3))\n    barplot(sorted_GO_NK_Th$NES[c(1:10, (nrow(sorted_GO_NK_Th)-9):nrow(sorted_GO_NK_Th))],\n        horiz = T, names=sorted_GO_NK_Th$Description[c(1:10, (nrow(sorted_GO_NK_Th)-9):nrow(sorted_GO_NK_Th))],\n        las=2, xlab=\"NES\",\n        cex.names = 0.7,\n        col=sorted_GO_NK_Th$color[c(1:10, (nrow(sorted_GO_NK_Th)-9):nrow(sorted_GO_NK_Th))]) \n    abline(v=0)\n</code></pre> </p> <p>With results of an over-representation analysis, where the output is of class <code>enrichResult</code>, the <code>barplot()</code> function can be used directly. You can either show the significant gene sets, or a custom selection of them.</p> <pre><code># Use the GO_enrich analysis performed above, of the over-representation analysis \n# of genes up-regulated in NK cells:\n# barplot() can be directly used on enrichResult objects: but not on gseaResult objects\ngraphics::barplot(GO_enrich)\ngraphics::barplot(GO_enrich, color = \"qvalue\", x = \"GeneRatio\")\n\ngraphics::barplot(GO_NK_Th) # this is a gseaResult object\n# Error in barplot.default(GO_NK_Th) : \n# 'height' must be a vector or a matrix\n\n# Select only 2 out of the significant gene sets:\nego_selection = GO_enrich[GO_enrich@result$ID == \"GO:0042287\" | GO_enrich@result$ID == \"GO:0004713\", asis=T]\nbarplot(ego_selection)\n</code></pre> <p>Here, we used the barplot function of the graphics package, but you can of course use ggplot2 functions. Please see the Bonus code page for examples of barplots with ggplot2 (and tidyverse) functions. </p> <p>A common way to represent the enrichment score of a single gene set after GSEA is the barcode plot (i.e gsea plot), with the <code>gseaplot()</code> function that can be used directly on objects of class <code>gseaResult</code> (i.e. output by clusterProfiler functions). </p> <pre><code># Barcode plot\n# You need the ID of the GO gene set to plot:\nGO_NK_Th@result[1:10,1:6]\n\n# For a gene set that is down-regulated in NK cells:\ngseaplot(GO_NK_Th, geneSetID = \"GO:0002181\",\n         title=\"GO:0002181 - cytoplasmic translation\")\n# And one that is up-regulated in NK cells\ngseaplot(GO_NK_Th, geneSetID = \"GO:0002443\",\n         title=\"GO:0002443 - leukocyte mediated immunity\")\n</code></pre> <p>Finally, clusterProfiler provides several visualization methods that can be used directly on objects of class \u201cgseaResult\u201d or \u201cenrichResult. These functions are implemented in the enrichplot package that was developped to go with clusterProfiler. Examples are the dotplot, the gene-concept network (cnetplot), the enrichment map (emapplot) and the ridge plots. Feel free to consult the chapter on visualization of the nice clusterProfiler book to see all the possible options and test others than the ones listed here!</p> <p><pre><code># Dotplot on enrichResult and gseaResult objects:\nenrichplot::dotplot(GO_enrich, orderBy=\"p.adjust\")\nenrichplot::dotplot(GO_NK_Th, orderBy=\"p.adjust\")\n</code></pre> </p> <pre><code># Gene concept network:\ncnetplot(GO_enrich, categorySize=\"pvalue\")\ncnetplot(GO_NK_Th, showCategory = 3)\n</code></pre> <pre><code># The enrichment map:\nego2 &lt;- pairwise_termsim(GO_NK_Th)\nemapplot(ego2, color=\"p.adjust\")\n\n# The ridge plots:\n# Distribution of t-statistic for genes included in significant gene sets or in selected gene sets:\nridgeplot(GO_NK_Th)\n# What is the difference with core_enrichment =F?\nridgeplot(GO_NK_Th, core_enrichment = F)\n\n# Select which GO terms to show in the ridge plot:\nGO_NK_Th_selection &lt;- GO_NK_Th[GO_NK_Th$ID == \"GO:0002181\", asis=T]\nridgeplot(GO_NK_Th_selection)\nGO_NK_Th_selection &lt;- GO_NK_Th[GO_NK_Th$ID %in% c(\"GO:0002181\",\"GO:0022613\",\n                                                  \"GO:0042254\"), \n                                                  asis=T]\nridgeplot(GO_NK_Th_selection)\n# Terms that contain the keyword \"leukocyte\"\nGO_NK_Th_selection &lt;- GO_NK_Th[grep(\"leukocyte\",GO_NK_Th@result$Description), asis=T]\nridgeplot(GO_NK_Th_selection)\n</code></pre> <p>Please see the Bonus code page for an example of a lollipop plot with ggplot2. </p>"},{"location":"exercises/#exercise-4-the-last-one-enrichment-of-other-collections-of-gene-sets","title":"Exercise 4 (the last one!) - Enrichment of other collections of gene sets","text":"<p>We will now perform GSEA of other collections of gene sets, such as KEGG or Hallmark. For GSEA of the KEGG gene sets, the gene IDs have to be NCBI Entrez gene IDs. ClusterProfiler provides the bitr() function to convert gene label types.</p> <pre><code>keytypes(org.Hs.eg.db)\n# convert from= \"ENSEMBL\" to \"SYMBOL\" and \"ENTREZID\"\ngene_convert &lt;- bitr(as.character(NK_vs_Th$ensembl_gene_id), \n                     fromType=\"ENSEMBL\", \n                     toType=c(\"SYMBOL\", \"ENTREZID\"), OrgDb=\"org.Hs.eg.db\")\n\n# Check the format of the data frame obtained after conversion:                     \nhead(gene_convert)\ndim(gene_convert)\n</code></pre> <p>Similarly to the gseGO() function, we need to provide a named and sorted vector of t-statistics, the difference is that the names will be Entrez gene IDs.</p> <pre><code># Create a vector of genes that are coded with the EntrezID:\n# use the sorted gene list gl previously created:\ngl_kegg&lt;-cbind(SYMBOL=names(gl), t=gl)\n\n# merge with converted gene symbols to combine both:\n# by default the data frames are merged on the columns with names they both have\ngl_kegg&lt;-merge(gl_kegg, gene_convert)\nhead(gl_kegg)\n\ngl_kegg_list&lt;-as.numeric(as.character(gl_kegg$t))\nnames(gl_kegg_list)&lt;-as.character(gl_kegg$ENTREZID)\ngl_kegg_list&lt;-sort(gl_kegg_list, decreasing = T)\n\n# run GSEA of KEGG (please note that requires internet connection to download the KEGG annotations from http)\nKEGG_NK_Th&lt;-gseKEGG(gl_kegg_list, organism = \"hsa\", \"ncbi-geneid\",\n                    minGSSize = 30,\n                    eps=0,\n                    seed=T)\n# Reading KEGG annotation online: \"https://rest.kegg.jp/link/hsa/pathway\"...\n# Reading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/hsa\"...\n# Reading KEGG annotation online: \"https://rest.kegg.jp/conv/ncbi-geneid/hsa\"...\n</code></pre> <p>Warning</p> <p>If you have issues with the <code>gseKEGG()</code> function and download of the KEGG collection via internet is blocked, an alternative is to use the msigdbr package, as shown in the Bonus code page.</p> <p>Explore the new object that was created. What is its structure? What does it contain? How many gene sets are up-regulated? Is their an immune-related gene set significant? Because we had NK cells in our dataset, is the NK cell-mediated cytotoxicity KEGG gene set significant? What is the total number of built-in KEGG gene sets and how can you view the genes included in a particular gene set?</p> Answer <pre><code>    str(KEGG_NK_Th)\n    View(KEGG_NK_Th@result)\n\n    # Up-regulated gene sets:\n    summary(KEGG_NK_Th@result$NES&gt;0)\n\n    KEGG_NK_Th@result[grep(\"immune\",KEGG_NK_Th@result$Description), ]\n\n    KEGG_NK_Th@result[grep(\"Natural killer\",KEGG_NK_Th@result$Description), ]\n\n    # How many built-in KEGG pathways are there?\n    length(KEGG_NK_Th@geneSets)\n\n    # Genes involved in Natural killer cell mediated cytotoxicity (hsa04650)\n    KEGG_NK_Th@geneSets$hsa04650 # coded as Entrez Gene ID...\n</code></pre> <p>Once you have performed a GSEA of the KEGG pathways, it is possible to overlay the fold change values of your genes on top of the KEGG pathway maps available online. For this, create a named vector of fold change values, where the non-significant genes will be grey, while the up- and down- regulated genes will be colored in the KEGG pathway map. The pathview() function comes from the pathview package (surprisingly\u2026)</p> <pre><code>library(pathview)\n\n# pathview map with non-significant genes in grey:\n# set log fold change of non-significant genes to 0:\nNK_vs_Th$logFC_0&lt;-ifelse(NK_vs_Th$p.adj&gt;0.05, 0, NK_vs_Th$logFC)\n\n# create named vector of fold change values:\ngenePW&lt;-NK_vs_Th$logFC_0\nnames(genePW)&lt;-NK_vs_Th$symbol\n\n# Create pathview map for Ribosome = hsa03010\npathview(gene.data  = genePW,\n         pathway.id = \"hsa03010\",\n         species    = \"hsa\",\n         gene.idtype = \"SYMBOL\")\n\n# Create pathview map of Natural killer cell mediated cytotoxicity = hsa04650\npathview(gene.data  = genePW,\n         pathway.id = \"hsa04650\",\n         species    = \"hsa\",\n         gene.idtype = \"SYMBOL\")\n</code></pre> <p>Very often, researchers have their own gene sets in mind, either that they compiled from the literature, or that they defined from previous experiments. If this is the case for your experiment, you can generate an Excel file that contains one gene set per row, the 2 first columns contain the gene set ID and the gene set description, and the genes that belong to each gene set are listed in the next columns. To have an idea of the structure of this file, open the .gmt file that we provided using Excel or a Text editor (NotePad, TextWrangler, BBEdit, etc).</p> <p>In this exercise, we will perform a GSEA of the 50 hallmark gene sets that can be downloaded from MSigDB, which we can import using <code>clusterProfiler::read.gmt()</code>.  Alternatively, we can import the Hallmark gene sets using <code>msigdbr</code>. What is the format of the object that is created? Use the GSEA() function, by providing the named and sorted vector of t-statistics we used above with gseGO(). Why do we use this one and not the one created for gseKEGG()?</p> <pre><code># Import hallmark, convert to term2gene and run GSEA:\nterm2gene_h &lt;- msigdbr(species = \"Homo sapiens\", category = \"H\")\n# Or alternatively:\n# term2gene_h&lt;-read.gmt(\"h.all.v2023.2.Hs.symbols.gmt\")\n\nhead(term2gene_h)\nlength(unique(term2gene_h$gs_name)) # 50\n\n# Run GSEA with the function that allows to use custom gene sets, \n# provide the named vector of t statistics\nh_NK_vs_Th&lt;-GSEA(gl, TERM2GENE = term2gene_h[,c(\"gs_name\", \"gene_symbol\")],\n                 eps=0,\n                 seed=T)\n\nView(h_NK_vs_Th@result)\n\n# Number of significant gene sets:\nlength(which(h_NK_vs_Th@result$p.adjust&lt;=0.05)) \n</code></pre> <p>Finally, we can easily visualize the results:</p> <pre><code># A dotplot with geneRatio or NES on the x-axis:\ndotplot(h_NK_vs_Th)\ndotplot(h_NK_vs_Th, x=\"NES\", orderBy=\"p.adjust\")\n\n# A barcode plot:\ngseaplot2(h_NK_vs_Th, geneSetID = \"HALLMARK_MTORC1_SIGNALING\",\n           title=\"HALLMARK_MTORC1_SIGNALING\")\n</code></pre>"},{"location":"exercises/#feedback","title":"Feedback","text":"<p>Thanks for attending this course! Don\u2019t forget to give honest feedback via the link sent by the course organizer.</p>"},{"location":"exercises/#extra-exercise-for-ects-credits","title":"Extra exercise for ECTS credits","text":"<ul> <li>Perform GSEA of the NK vs Th data using the Reactome gene sets either downloaded using the <code>msigdbr</code>  packege or downloaded from the  MSigDB website here.</li> <li>How many gene sets are significantly enriched?  </li> <li>Generate a barplot of the NES of all significant gene sets, with the bars ordered according to NES value.  </li> <li>Generate a barcode plot (i.e. gsea plot) for the gene set with the lowest NES.  </li> </ul> <p>Steps</p> <ul> <li>Import the reactome gene sets using <code>msigdbr()</code> with arguments <code>category=\"C2\"</code> and <code>subcategory=\"CP:REACTOME\"</code>, or import from the provided file <code>c2.cp.reactome.v2023.1.Hs.symbols.gmt</code> using <code>read.gmt()</code>.  </li> <li>Use the <code>GSEA()</code> function providing a sorted named vector of t-statistics and the reactome gene sets, and use argument <code>minGSSize=30</code>.  </li> <li>Count the number of significant adjusted p-values.  </li> <li>Use <code>barplot()</code> and <code>gseaplot()</code> for the visualization of the results.  </li> </ul>"},{"location":"links/","title":"Useful links","text":"<p>Here we provide some additional links</p>"},{"location":"links/#some-tutorials-to-learn-or-practice-r","title":"Some tutorials to learn or practice R","text":"<p>https://support.posit.co/hc/en-us/articles/200552336-Getting-Help-with-R</p> <p>https://r-coder.com/learn-r/</p>"},{"location":"links/#r-for-data-science-book","title":"R for Data Science Book","text":"<p>Book (2nd edition) by Hadley Wickham (a very active R developer), Mine \u00c7etinkaya-Rundel and Garrett Grolemund. The book makes heavy use of the tidyverse, which is a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. ggplot2 is part of the tidyverse packages.</p> <p>https://r4ds.hadley.nz/</p>"},{"location":"links/#ggplot2-tutorial","title":"ggplot2 tutorial","text":"<p>https://ggplot2.tidyverse.org/</p>"},{"location":"links/#r-charts","title":"R-charts","text":"<p>A site that has been created to be a reference for learning how to create charts in R as well as a place to look for inspiration. Code examples to create plots with base R, ggplot2. Color charts with R color name vs HEX equivalent.</p> <p>https://r-charts.com/</p>"},{"location":"links/#r-markdown","title":"R Markdown","text":"<p>A useful resource is RStudio\u2019s R Markdown tutorial.</p> <p>For tweaking your reports, such as chosing different output formats, or hiding or showing the code within the report, we recommend that you consult the R markdown documentation provided in this Definite guide eBook.</p>"},{"location":"links/#cheatsheets","title":"Cheatsheets","text":"<p>Several cheatsheets available for different packages, eg R Markdown, ggplot2, RStudio,\u2026</p>"},{"location":"materials/","title":"Materials","text":""},{"location":"materials/#slides-of-lectures","title":"Slides of lectures","text":""},{"location":"materials/#day-1","title":"Day 1","text":"<p>Download slides - morning</p> <p>Download slides - afternoon</p>"},{"location":"materials/#day-2","title":"Day 2","text":"<p>Download slides - morning</p> <p>Download essential slides - afternoon</p> <p>Download slides - afternoon</p>"},{"location":"materials/#data-for-exercises","title":"Data for exercises","text":""},{"location":"materials/#data-for-exercises-of-day-1-only","title":"Data for exercises of day 1 only","text":"<p>Download course_datasets</p>"},{"location":"materials/#data-for-all-exercises-including-day-2-800-mb-data-size","title":"Data for all exercises, including day 2 (800 Mb data size)","text":"<p>Download from the drive here, using Pwd 54321</p>"},{"location":"precourse/","title":"Precourse preparations","text":""},{"location":"precourse/#r-and-rstudio","title":"R and RStudio","text":""},{"location":"precourse/#technical","title":"Technical","text":"<p>This course will be streamed via Zoom, you are thus required to have your own computer with an internet connection. Please, install the latest the version of R, followed by the installation of the free version of RStudio.</p> <p>At some point during the course, we will install R packages from within RStudio. This requires RStudio to access online repositories of packages and download them from the internet. Please ensure that this will not be blocked by firewalls.</p>"}]}