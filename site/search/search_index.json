{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Life scientists often use commercial software such as Prism for data analysis. These tools are useful for initial and basic analysis, but do not allow for more advanced or flexible analyses, nor for the analysis of omics data, neither for the establishment of pipelines and reports. On the other hand, R is statistical software that allows for very flexible analysis, customizable pipeline creation and generation of reports, and is open-source!</p> <p>The \u201cIntroduction to R for Life Sciences\u201d training is designed for beginners and will provide hands-on practical sessions with R and RStudio. Participants will receive example data and R commands to learn how to navigate the R environment, import and explore data, and generate graphs and reports. The example data will reflect the types generated through high-throughput sequencing.</p> <p>This course is proposed by the Translational Data Science Facility of the SIB Swiss Institute of Bioinformatics in Lausanne, and taught by Jo\u00e3o Louren\u00e7o and Tania Wyss.</p>"},{"location":"#learning-outcomes","title":"Learning outcomes","text":"<p>R is vast and cannot be learned in one day. The scope of this course is to:  </p> <ul> <li>Give you a basic understanding of concepts behind R.  </li> <li>Allow you to import and manipulate data in R.  </li> <li>Show you how to create your first plots.   </li> </ul> <p>This course is only the first step in your R journey!</p>"},{"location":"#asking-questions","title":"Asking questions","text":"<p>During lectures, you are encouraged to ask questions, any question! There are no bad questions!</p>"},{"location":"bonus_code/","title":"Bonus code","text":"<p>The following code shows more details about additional features of R, such as generating reports or running statistics. They might be useful for you.</p>"},{"location":"bonus_code/#statistics-with-r","title":"Statistics with R","text":"<p>The SIB course First Steps with R in life sciences provides additional material to perform statistics with R.</p> <p>The slides introducing statistics with R can be found here on the course material github page. </p> <p>The R code to run Wilcoxon or T tests can be found here (ex.9) using source data that can be found here. The R code to run a linear model can be found here (ex.10). Feel free to try it out!</p> <p>Finally, the SIB course Introduction to statistics with R is also designed for R beginners and introduces hypothesis testing, multiple testing correction, linear models, correlation and regression, and principal component analysis.</p>"},{"location":"bonus_code/#rna-sequencing-example-code","title":"RNA sequencing - example code","text":""},{"location":"bonus_code/#small-information-on-a-typical-rnaseq-workflow","title":"Small information on a typical RNAseq workflow","text":"<p>Download pdf</p>"},{"location":"bonus_code/#example-for-differential-expression-analysis-with-deseq2","title":"Example for differential expression analysis with DESeq2","text":"<p>Once sequencing reads have been aligned to the reference genome, and number of reads have been summarized per gene per sample, we can use R for downstream differential gene expression analysis. Several R packages exist for DE analysis, such as DESeq2, limma or edgeR. The short code below shows the initial steps of DE analysis with DESeq2, starting from a text file that contains numbers of sequencing reads per gene per sample, i.e. a matrix of raw counts. The samples included in the example matrix come from natural killer and T helper cells sorted from the peripheral blood of healthy donors.</p> <p>Download data Download script</p> <pre><code># DGE example with DESeq2:\n# R version 4.1.2 (2021-11-01)\n\n\nBiocManager::install(\"DESeq2\")\nlibrary(DESeq2) # v 1.34.0\n\n# setwd(\"path/to/downloadedData\")\n\ncounts_NK_Th&lt;-read.csv(\"htseq_counts_NK_Th.csv\", row.names = 1, header = T)\n\ncounts_NK_Th&lt;-counts_NK_Th[-c(which(rowSums(counts_NK_Th)==0)),]\ndim(counts_NK_Th)\n# [1] 38573    15\n\n# build a sample metadata table:\ncoldata&lt;-as.data.frame(cbind(cell_type=c(rep(\"NK\", 6),\n                           rep(\"Th\", 9)),\n               donor=sapply(strsplit(colnames(counts_NK_Th), \"_\"), '[',1),\n               sample_id=colnames(counts_NK_Th)))\ncoldata$cell_type&lt;-as.factor(coldata$cell_type)\ncoldata$cell_type&lt;-factor(coldata$cell_type,\n                          levels=levels(coldata$cell_type)[c(2,1)])\n\nhead(coldata)\n#   cell_type donor         sample_id\n# 1        NK   S15    S15_NK_CD56dim\n# 2        NK   S15 S15_NK_CD56bright\n# 3        NK   S16    S16_NK_CD56dim\n# 4        NK   S16 S16_NK_CD56bright\n# 5        NK   S17    S17_NK_CD56dim\n# 6        NK   S17 S17_NK_CD56bright\n\n# Create DESeq object:\ndds &lt;- DESeqDataSetFromMatrix(countData = counts_NK_Th,\n                              colData = coldata,\n                              design= ~ donor + cell_type) # Difference between cell types, accounting for the sample pairing\ndds &lt;- DESeq(dds)\nresultsNames(dds) # lists the coefficients\n# [1] \"Intercept\"          \"donor_S16_vs_S15\"   \"donor_S17_vs_S15\"   \"cell_type_NK_vs_Th\"\n\ndeseq2_NK_vs_Th &lt;- as.data.frame(results(dds,  \n                                         alpha=0.05, \n                                         contrast=c(\"cell_type\",\"NK\",\"Th\"),\n                                 cooksCutoff=F)) # use cooksCutoff=F only if some genes of interest do not have a calculated p-value\n                                                # author recomendation is to use default cooksCutoff=T    \n\nhead(deseq2_NK_vs_Th)\n#            baseMean log2FoldChange     lfcSE        stat       pvalue         padj\n# TSPAN6     40.851111     -6.9583034 1.1044621 -6.30017417 2.973114e-10 8.742152e-09\n# TNMD        0.104281     -0.1228379 3.1336380 -0.03919977 9.687311e-01           NA\n# DPM1     2566.964652     -0.1466129 0.2211112 -0.66307338 5.072836e-01 7.133950e-01\n# SCYL3     571.791633      0.5728065 0.4039864  1.41788547 1.562242e-01 3.515869e-01\n# C1orf112  201.504414      0.8758449 0.5938469  1.47486651 1.402484e-01 3.263445e-01\n# FGR      8793.900467      8.5188295 1.2025099  7.08420757 1.398422e-12 5.868549e-11\n\ndeseq2_NK_vs_Th[grep(\"CPS1\", rownames(deseq2_NK_vs_Th)),]\n#            baseMean log2FoldChange    lfcSE        stat     pvalue      padj\n# CPS1     2.34916186    -3.56324252 1.855768 -1.92009033 0.05484649 0.1702518\n# CPS1.IT1 0.09375824    -0.08381473 3.134376 -0.02674048 0.97866673        NA\ndeseq2_NK_vs_Th[grep(\"GZMB\", rownames(deseq2_NK_vs_Th)),]\n#      baseMean log2FoldChange     lfcSE     stat       pvalue        padj\n# GZMB 27758.47       9.075387 0.8897603 10.19981 1.986563e-24 2.65665e-22\n</code></pre>"},{"location":"bonus_code/#r-markdown","title":"R markdown","text":"<p>If a data analysis project involves many steps and generation of various plots, one of the easy and very practical ways to bundle and organize all steps of analysis together is to use R markdown files to generate PDF or html reports. These reports both display the R code used as well as the output generated, such as graphics, tables, statistical test results, \u2026</p> <p>The difference between an R script and an R markdown file, is that the code is organized within chunks in the R markdown file. In between the chunks, the user can write text that contains information about the analysis.</p> <p>To create an R markdown file, go to File &gt; New File &gt; R markdown. Add a name. This will create a new file that already has some example content. As you can see, the R code is organized in chunks highlighed in grey, with details written as free text in between the chunks.  We can see that the pound sign (#) is used outside of the R code chunks. In this case, the # symbol does not correspond to a comment, but will indicate header levels for the titles and subtitles within your final document obtained after report generation.</p> <p>Once the Rmd is ready, the report can be generated by hitting the \u201cKnit\u201d button at the top of the window. </p> <p>The example Rmd generates the following html report (saved in the same folder as the Rmd file by default), that shows both the code and the resulting output:</p> <p>You can find a short video that introduces some of the principles of R markdown on Youtube, from the beginning up to minute 23:30. Starting at minute 23:30, this video also introduces ggplot2.</p> <p>If you would like to practice creating your own R markdown, modify the one that is generated with the example content when you select File &gt; New File &gt; R Markdown.</p> <p>1) Create a new Rmd file with the following options at the top (in the top YAML instructions within the 2 dash sequences \u201c- - -\u201c)</p> <ul> <li>Title: \u00abLet\u2019s practice\u00bb</li> <li>Author: your name</li> <li>Select the \u00abuse current date when rendering object\u00bb option</li> <li>Default output format: HTML</li> </ul> <p>2) We can repeat the exercises of this course, but this time by creating a report: Within an R code chunk, insert the R code that you would like to execute. You can include code to create plots for example. If you have more than 1 plot to include, create a new R code chunk for each, and add a header (preceded by the # symbols outside of the code chunks) before each plot with some suggestive plot title.</p> <p>3) Save the Rmd file and produce the html document by \u00abknitting\u00bb it.</p> <p>For tweaking your reports, such as chosing different output formats, or hiding or showing the code within the report, we recommend that you consult the R markdown documentation provided in this Definite guide eBook.</p> <p>Another useful resource is RStudio\u2019s R Markdown tutorial. </p>"},{"location":"course_schedule/","title":"Course schedule","text":"<p>The course starts at 9am and ends around 5pm, with the following breaks (approximate times, please allow for some flexibility):</p> Topic 9am Start of course 10:30am to 10:50am Coffee break 12:30pm to 1:30pm Lunch break 3:30pm to 3:50pm Coffee break Approx. 5pm End of course"},{"location":"exercises/","title":"Exercises","text":"<p>In this section, you will find the R code that we will use during the course. We will explain the code and output during correction of the exercises.</p>"},{"location":"exercises/#first-exploration-of-r-using-rstudio","title":"First exploration of R using RStudio","text":"<p>Four windows are displayed by default within RStudio. One of the windows corresponds to the R console.</p> <p>Type the following commands within the console (bottom left window in RStudio) at the prompt (\u201c&gt;\u201d), followed by the \u201cEnter\u201d key after each one to view the output printed on the console.</p> <p><pre><code>1 + 1\n</code></pre> The first command (1 + 1) prints \u201c2\u201d in the console. There you can see that R can also simply be used as a calculator.  <pre><code>x   &lt;- 128.5\n</code></pre> The second command does not print anything in the console, but a new variable called \u201cx\u201d and that contains the value 128.5 is created and listed in the Workspace (top right window in RStudio).</p> <p>The assignment operator <code>&lt;-</code> : The nice part of R is that one can keep values in the memory, by using the assignment operator <code>&lt;-</code> which is used to assign a value (here 128.5) and a name to a variable (here x) and store it in the session\u2019s memory. We can use either <code>&lt;-</code> or <code>=</code> to assign values to an object. Stick to one for consistency. <pre><code>x\n</code></pre> The third command prints the value stored within the \u201cx\u201d variable in the console. <pre><code>abs(-11)\n</code></pre> The fourth command, with the use of the abs() function, prints the absolute value of -11 in the console. <pre><code>?p.adjust\n</code></pre> Finally, the fifth command opens the help page for the p.adjust function (bottom right \u201cHelp\u201d window in RStudio). What does this function do?</p>"},{"location":"exercises/#working-directory","title":"Working directory","text":"<p>To manipulate data within R, we first need to import it. R needs a way to locate the files within the hard drive or system. Therefore, we can specify the working directory, i.e. the location where R will look for files.</p> <p>Warning</p> <p>To run the code below with setwd() make sure you put within the quotes a path that exists within your system.</p> <pre><code># To see what is the current working directory, use the function:\ngetwd()\n# [1] \"C:/Users/twyss/Documents/Rcourse\"\n\n# To change the working directory to any existing folder on your hard drive or system, use setwd() and the file path within quotes, e.g.\nsetwd(\"D:/R_exercises/\")\n</code></pre>"},{"location":"exercises/#workspace-environment-and-history","title":"Workspace - Environment and history","text":"<p>Once a value has been assigned to a named variable, as we did assigning 128.5 to x above, the variable is saved and listed within the Workspace, which is displayed in one of the RStudio windows. </p> <p>Explore your workspace using the command line:</p> <pre><code># To list the objects or variables that are in your workspace, type\nls()\n# To remove (delete) an object from the workspace, use function rm():\nrm(x)\n# To remove (delete) all objects from the workspace, type\nrm(list=ls())\n</code></pre>"},{"location":"exercises/#lets-practice-create-a-script","title":"Let\u2019s practice - Create a script","text":"<p>R scripts allow you to save all code for further use or reference. For big projects, it is essential to create an R script. To create a script, go to File &gt; New File &gt; R Script. Save it with file name \u201cex1.R\u201d or any other that is suitable for you. Add a comment symbol (<code>#</code>, the pound or hash sign) at the beginning of the first line.</p> <p>Type or paste the following code. Look at the script (before running it).</p> <p>Can you understand each line? What do you expect it to print to the console? Next, run the script and explore RStudio features such as the Workspace (Environment). Run the script line by line. Try both the \u201cRun\u201d button and the keyboard shortcut.  Watch variables appear in the Environment window (top right). Watch what is printed to the console (bottom left window). Does it match your expectation?</p> <pre><code># First Steps and commands, ex. 1  \nw &lt;- 3\nh &lt;- 0.5\narea &lt;- w * h \narea\n</code></pre> <p>To run a line in the script within RStudio, place your cursor anywhere in a line, and hit: </p> <ul> <li>Ctrl + Enter (Windows).  </li> <li>Cmd + Enter (Mac).  </li> <li>or click the \u201cRun\u201d button located above the script file.   </li> </ul> <p>Tips: </p> <ul> <li>Run part of a line or multiple lines: Highlight the code, then proceed as  above.   </li> <li>Most of your code should be developed and saved in  scripts.   </li> <li>You can execute individual lines of code interactively while you are writing it.   </li> <li>You can run the entire script once it is ready and debugged.   </li> </ul> <p>Don\u2019t forget  to save your script often and to have a back-up! Also, notice the syntax highlighting within the script: Comments are in green, functions and variables are in black, numbers are in blue.</p>"},{"location":"exercises/#packages","title":"Packages","text":"<p>When R is installed for the first time, a set of \u201cbase\u201d packages is installed along the R software. The list of available packages can be viewed in the package Explorer window within RStudio (bottom right \u201cPackages\u201d window). Each package is a bundle of functions designed and created by an author to perform specific, usually related tasks. When working with \u201cnon-standard\u201d data types, eg in bioinformatics or flow cytometry analysis, packages with bioinformatics-related functions need to be installed by the user. </p> <p>Common repositories for packages are CRAN and Bioconductor (also github, but it is not restricted to hosting R packages)</p> <p>Install packages from CRAN with the install.packages() function.</p> <p>To install packages hosted on Bioconductor, we need 2 steps. First, we install a package called <code>BiocManager</code>, that will allow us to have access to the <code>install()</code> function to download Bioconductor packages.</p> <pre><code># Install packages hosted on CRAN: use a function from the utils package:\ninstall.packages(\"stringi\") # stringi is a package for character string manipulations\n\n# Install packages hosted on bioconductor: first install the BiocManager package that is available on CRAN:\ninstall.packages(\"BiocManager\")\n\n# Then use the install() function from the BiocManager package\n# !! This takes time to complete, run it during coffee or lunch break!\n# Install limma:\nBiocManager::install(\"limma\")\n</code></pre> <p>Once a package is installed, its content and functions need to be made accessible to R. <code>library()</code> loads the package for the current session. It is good practice to load all needed packages at the top of a script.</p> <pre><code># My Script\n\nlibrary(stringi)\nlibrary(DESeq2) \nlibrary(MASS)  \nlibrary(ggplot2)\n</code></pre> <p>If you run the above code, what is the output on the Console? What does it mean?</p> Answer <p>Packages such as DESeq2 are not installed as base packages. They are hosted on Bioconductor and provide functions for RNAseq or microarray data analysis. The error message indicates that these packages were not installed and need to be installed before being able to load them.</p>"},{"location":"exercises/#r-version-and-session-information","title":"R version and session information","text":"<p>R is constantly upgraded by developers, who release a new version of R about every 6 months. Along with R upgrades, packages also get upgrades. From one version to the other of a package, it may happen that the default parameters of functions change. Therefore, it is important to always have in mind which current version of R and packages have been used for any analysis. Print the current R version and versions of attached or loaded packages using:</p> <pre><code># Prints the currently used R version\nR.version.string    \n\n# Print version information about R and all attached or loaded packages\nsessionInfo() \n\n# Print the version of a specific package:\npackageVersion(\"stringi\")\n</code></pre>"},{"location":"exercises/#lets-practice-follow-our-script","title":"Let\u2019s practice - Follow our script !","text":"<p>Download and open the provided commented script within R, run the commands and view the the output!</p> <p>In our script, we included some sections with \u201cfill in the blanks\u201d exercises. You can either download the script without the solutions (first button), or the script with the solutiobs. </p> <p>Download script without solutions</p> <p>Download script with solutions</p> <p>Warning</p> <p>Make sure you have downloaded the csv files we import in the scripts from the Materials section.</p> <p>End of your first day  with R, good job!</p>"},{"location":"links/","title":"Useful links","text":"<p>Here we provide some additional links</p>"},{"location":"links/#crans-introduction-to-r-book","title":"CRAN\u2019s Introduction to R book","text":"<p>https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf</p>"},{"location":"links/#sibs-first-steps-with-r-in-life-sciences-2-day-course","title":"SIB\u2019s First steps with R in Life Sciences - 2-day course","text":"<p>https://github.com/sib-swiss/first-steps-with-R-training/tree/master</p> <p>It includes more on statistics on the second day.</p>"},{"location":"links/#sibs-introduction-to-statistics-with-r-34-day-course","title":"SIB\u2019s Introduction to Statistics with R - 3/4-day course","text":"<p>For R beginners:</p> <p>https://sib-swiss.github.io/Introduction-to-statistics-with-R/</p>"},{"location":"links/#introduction-to-r-for-cancer-scientists","title":"Introduction to R for Cancer Scientists","text":"<p>For R beginners:</p> <p>https://bioinformatics-core-shared-training.github.io/r-intro/index.html</p>"},{"location":"links/#some-tutorials-to-learn-or-practice-r","title":"Some tutorials to learn or practice R","text":"<p>https://support.posit.co/hc/en-us/articles/200552336-Getting-Help-with-R</p> <p>https://r-coder.com/learn-r/</p>"},{"location":"links/#r-for-data-science-book","title":"R for Data Science Book","text":"<p>Book (2nd edition) by Hadley Wickham (a very active R developer), Mine \u00c7etinkaya-Rundel and Garrett Grolemund. The book makes heavy use of the tidyverse, which is a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. ggplot2 is part of the tidyverse packages.</p> <p>https://r4ds.hadley.nz/</p>"},{"location":"links/#ggplot2-tutorial","title":"ggplot2 tutorial","text":"<p>https://ggplot2.tidyverse.org/</p> <p>You can also have a look at ggplot2\u2019s vignette. </p> <p>The R Graphics Cookbook includes code to create graphs with both the base <code>graphics</code> package as well as <code>ggplot2</code>.</p>"},{"location":"links/#r-charts","title":"R-charts","text":"<p>A site that has been created to be a reference for learning how to create charts in R as well as a place to look for inspiration. Code examples to create plots with base R, ggplot2. Color charts with R color name vs HEX equivalent.</p> <p>https://r-charts.com/</p>"},{"location":"links/#r-colors","title":"R colors","text":"<p>A nice pdf file with R color names by Dr Ying Wei</p> <p>http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf</p>"},{"location":"links/#r-markdown","title":"R Markdown","text":"<p>A useful resource is RStudio\u2019s R Markdown tutorial.</p> <p>For tweaking your reports, such as chosing different output formats, or hiding or showing the code within the report, we recommend that you consult the R markdown documentation provided in this Definite guide eBook.</p>"},{"location":"links/#cheatsheets","title":"Cheatsheets","text":"<p>Several cheatsheets available for different packages, eg R Markdown, ggplot2, RStudio,\u2026</p>"},{"location":"materials/","title":"Materials","text":""},{"location":"materials/#slides","title":"Slides","text":"<p>Download slides</p>"},{"location":"materials/#data-for-exercises","title":"Data for exercises","text":"<p>The data we are using for the exercises comes from Tsoi et al, 2018. The RNA seq data as FPKM values is publicly available under GEO accession number GSE80829.</p> <p>Download course_datasets</p>"},{"location":"precourse/","title":"Precourse preparations","text":""},{"location":"precourse/#r-and-rstudio","title":"R and RStudio","text":""},{"location":"precourse/#technical","title":"Technical","text":"<p>Please, install the latest the version of R, followed by the installation of the free version of RStudio.</p> <p>At some point during the course, we may install R packages from within RStudio. This requires RStudio to access online repositories of packages and download them from the internet. Please ensure that this will not be blocked by firewalls.</p>"}]}