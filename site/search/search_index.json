{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Life scientists often use commercial software such as Prism for data analysis. These tools are useful for initial and basic analysis, but do not allow for more advanced or flexible analyses, nor for the analysis of omics data, neither for the establishment of pipelines and reports. On the other hand, R is statistical software that allows for very flexible analysis, customizable pipeline creation and generation of reports, and is open-source!</p> <p>The \u201cIntroduction to R for Life Sciences\u201d training is designed for beginners and will provide hands-on practical sessions with R and RStudio. Participants will receive example data and R commands to learn how to navigate the R environment, import and explore data, and generate graphs and reports. The example data will reflect the types generated through high-throughput sequencing.</p> <p>This course is proposed by the Translational Data Science Facility of the SIB Swiss Institute of Bioinformatics in Lausanne, and taught by Jo\u00e3o Louren\u00e7o and Tania Wyss.</p>"},{"location":"#learning-outcomes","title":"Learning outcomes","text":"<p>R is vast and cannot be learned in one day. The scope of this course is to:  Give you a basic understanding of concepts behind R.  Allow you to import and manipulate data in R. * Show you how to create your first plots.   </p> <p>This course is only the first step in your R journey!</p>"},{"location":"#asking-questions","title":"Asking questions","text":"<p>During lectures, you are encouraged to ask questions ! </p>"},{"location":"bonus_code/","title":"Bonus code","text":"<p>The following code shows more details about additional features of R, such as generating reports or running statistics. They might be useful for you.</p>"},{"location":"bonus_code/#r-markdown","title":"R markdown","text":"<p>If a data analysis project involves many steps and generation of various plots, one of the easy and very practical ways to bundle and organize all steps of analysis together is to use R markdown files to generate PDF or html reports. These reports both display the R code used as well as the output generated, such as graphics, tables, statistical test results, \u2026</p> <p>The difference between an R script and an R markdown file, is that the code is organized within chunks in the R markdown file. In between the chunks, the user can write text that contains information about the analysis.</p> <p>To create an R markdown file, go to File &gt; New File &gt; R markdown. Add a name. This will create a new file that already has some example content. As you can see, the R code is organized in chunks highlighed in grey, with details written as free text in between the chunks.  We can see that the pound sign (#) is used outside of the R code chunks. In this case, the # symbol does not correspond to a comment, but will indicate header levels for the titles and subtitles within your final document obtained after report generation.</p> <p>Once the Rmd is ready, the report can be generated by hitting the \u201cKnit\u201d button at the top of the window. </p> <p>The example Rmd generates the following html report (saved in the same folder as the Rmd file by default), that shows both the code and the resulting output:</p> <p>You can find a short video that introduces some of the principles of R markdown on Youtube, from the beginning up to minute 23:30. Starting at minute 23:30, this video also introduces ggplot2.</p> <p>If you would like to practice creating your own R markdown, modify the one that is generated with the example content when you select File &gt; New File &gt; R Markdown.</p> <p>1) Create a new Rmd file with the following options at the top (in the top YAML instructions within the 2 dash sequences \u201c- - -\u201c)</p> <ul> <li>Title: \u00abLet\u2019s practice\u00bb</li> <li>Author: your name</li> <li>Select the \u00abuse current date when rendering object\u00bb option</li> <li>Default output format: HTML</li> </ul> <p>2) We can repeat the exercises of this course, but this time by creating a report: Within an R code chunk, insert the R code that you would like to execute. You can include code to create plots for example. If you have more than 1 plot to include, create a new R code chunk for each, and add a header (preceded by the # symbols outside of the code chunks) before each plot with some suggestive plot title.</p> <p>3) Save the Rmd file and produce the html document by \u00abknitting\u00bb it.</p> <p>For tweaking your reports, such as chosing different output formats, or hiding or showing the code within the report, we recommend that you consult the R markdown documentation provided in this Definite guide eBook.</p> <p>Another useful resource is RStudio\u2019s R Markdown tutorial. </p>"},{"location":"bonus_code/#introduction-to-statistics-with-r","title":"Introduction to Statistics with R","text":"<p>The SIB course \u201cFirst Steps with R in life sciences\u201d provides additional material to perform statistics with R.</p> <p>The slides introducing statistics with R can be found here on the course material github page. </p> <p>The R code to run Wilcoxon or T tests can be found here (ex.9) using source data that can be found here. The R code to run a linear model can be found here (ex.10). Feel free to try it out!</p>"},{"location":"bonus_code/#rna-sequencing-example-code","title":"RNA sequencing - example code","text":""},{"location":"bonus_code/#small-information-on-a-typical-rnaseq-workflow","title":"Small information on a typical RNAseq workflow","text":"<p>Download pdf</p>"},{"location":"bonus_code/#example-for-differential-expression-analysis-with-deseq2","title":"Example for differential expression analysis with DESeq2","text":"<p>Once sequencing reads have been aligned to the reference genome, and number of reads have been summarized per gene per sample, we can use R for downstream differential gene expression analysis. Several R packages exist for DE analysis, such as DESeq2, limma or edgeR. The short code below shows the initial steps of DE analysis with DESeq2, starting from a text file that contains numbers of sequencing reads per gene per sample, i.e. a matrix of raw counts. The samples included in the example matrix come from natural killer and T helper cells sorted from the peripheral blood of healthy donors.</p> <p>Download data Download script</p> <pre><code># DGE example with DESeq2:\n# R version 4.1.2 (2021-11-01)\n\n\nBiocManager::install(\"DESeq2\")\nlibrary(DESeq2) # v 1.34.0\n\n# setwd(\"path/to/downloadedData\")\n\ncounts_NK_Th&lt;-read.csv(\"htseq_counts_NK_Th.csv\", row.names = 1, header = T)\n\ncounts_NK_Th&lt;-counts_NK_Th[-c(which(rowSums(counts_NK_Th)==0)),]\ndim(counts_NK_Th)\n# [1] 38573    15\n\n# build a sample metadata table:\ncoldata&lt;-as.data.frame(cbind(cell_type=c(rep(\"NK\", 6),\n                           rep(\"Th\", 9)),\n               donor=sapply(strsplit(colnames(counts_NK_Th), \"_\"), '[',1),\n               sample_id=colnames(counts_NK_Th)))\ncoldata$cell_type&lt;-as.factor(coldata$cell_type)\ncoldata$cell_type&lt;-factor(coldata$cell_type,\n                          levels=levels(coldata$cell_type)[c(2,1)])\n\nhead(coldata)\n#   cell_type donor         sample_id\n# 1        NK   S15    S15_NK_CD56dim\n# 2        NK   S15 S15_NK_CD56bright\n# 3        NK   S16    S16_NK_CD56dim\n# 4        NK   S16 S16_NK_CD56bright\n# 5        NK   S17    S17_NK_CD56dim\n# 6        NK   S17 S17_NK_CD56bright\n\n# Create DESeq object:\ndds &lt;- DESeqDataSetFromMatrix(countData = counts_NK_Th,\n                              colData = coldata,\n                              design= ~ donor + cell_type) # Difference between cell types, accounting for the sample pairing\ndds &lt;- DESeq(dds)\nresultsNames(dds) # lists the coefficients\n# [1] \"Intercept\"          \"donor_S16_vs_S15\"   \"donor_S17_vs_S15\"   \"cell_type_NK_vs_Th\"\n\ndeseq2_NK_vs_Th &lt;- as.data.frame(results(dds,  \n                                         alpha=0.05, \n                                         contrast=c(\"cell_type\",\"NK\",\"Th\"),\n                                 cooksCutoff=F)) # use cooksCutoff=F only if some genes of interest do not have a calculated p-value\n                                                # author recomendation is to use default cooksCutoff=T    \n\nhead(deseq2_NK_vs_Th)\n#            baseMean log2FoldChange     lfcSE        stat       pvalue         padj\n# TSPAN6     40.851111     -6.9583034 1.1044621 -6.30017417 2.973114e-10 8.742152e-09\n# TNMD        0.104281     -0.1228379 3.1336380 -0.03919977 9.687311e-01           NA\n# DPM1     2566.964652     -0.1466129 0.2211112 -0.66307338 5.072836e-01 7.133950e-01\n# SCYL3     571.791633      0.5728065 0.4039864  1.41788547 1.562242e-01 3.515869e-01\n# C1orf112  201.504414      0.8758449 0.5938469  1.47486651 1.402484e-01 3.263445e-01\n# FGR      8793.900467      8.5188295 1.2025099  7.08420757 1.398422e-12 5.868549e-11\n\ndeseq2_NK_vs_Th[grep(\"CPS1\", rownames(deseq2_NK_vs_Th)),]\n#            baseMean log2FoldChange    lfcSE        stat     pvalue      padj\n# CPS1     2.34916186    -3.56324252 1.855768 -1.92009033 0.05484649 0.1702518\n# CPS1.IT1 0.09375824    -0.08381473 3.134376 -0.02674048 0.97866673        NA\ndeseq2_NK_vs_Th[grep(\"GZMB\", rownames(deseq2_NK_vs_Th)),]\n#      baseMean log2FoldChange     lfcSE     stat       pvalue        padj\n# GZMB 27758.47       9.075387 0.8897603 10.19981 1.986563e-24 2.65665e-22\n</code></pre>"},{"location":"course_schedule/","title":"Course schedule","text":"<p>The course starts at 9am and ends around 5pm, with the following breaks (approximate times, please allow for some flexibility):</p> Topic 9am Start of course 10:30am to 10:50am Coffee break 12:30pm to 1:30pm Lunch break 3:30pm to 3:50pm Coffee break Approx. 5pm End of course"},{"location":"exercises/","title":"Exercises","text":"<p>In this section, you will find the R code that we will use during the course. We will explain the code and output during correction of the exercises.</p>"},{"location":"exercises/#first-exploration-of-r-using-rstudio","title":"First exploration of R using RStudio","text":"<p>Four windows are displayed by default within RStudio. One of the windows corresponds to the R console.</p> <p>Type the following commands within the console (bottom left window in RStudio) at the prompt (\u201c&gt;\u201d), followed by the \u201cEnter\u201d key after each one to view the output printed on the console.</p> <p><pre><code>1 + 1\n</code></pre> The first command (1 + 1) prints \u201c2\u201d in the console. There you can see that R can also simply be used as a calculator.  <pre><code>x   &lt;- 128.5\n</code></pre> The second command does not print anything in the console, but a new variable called \u201cx\u201d and that contains the value 128.5 is created and listed in the Workspace (top right window in RStudio). <pre><code>x\n</code></pre> The third command prints the value stored within the \u201cx\u201d variable in the console. <pre><code>abs(-11)\n</code></pre> The fourth command, with the use of the abs() function, prints the absolute value of -11 in the console. <pre><code>?p.adjust\n</code></pre> Finally, the fifth command opens the help page for the p.adjust function (bottom right \u201cHelp\u201d window in RStudio). What does this function do?</p>"},{"location":"exercises/#working-directory","title":"Working directory","text":"<p>To manipulate data within R, we first need to import it. R needs a way to locate the files within the hard drive or system. Therefore, we can specify the working directory, i.e. the location where R will look for files.</p> <p>Warning</p> <p>To run the code below with setwd() make sure you put within the quotes a path that exists within your system.</p> <pre><code># To see what is the current working directory, use the function:\ngetwd()\n# [1] \"C:/Users/twyss/Documents/Rcourse\"\n\n# To change the working directory to any existing folder on your hard drive or system, use setwd() and the file path within quotes, e.g.\nsetwd(\"D:/R_exercises/\")\n</code></pre>"},{"location":"exercises/#workspace-environment-and-history","title":"Workspace - Environment and history","text":"<p>Once a value has been assigned to a named variable, as we did assigning 128.5 to x above, the variable is saved and listed within the Workspace, which is displayed in one of the RStudio windows. </p> <p>Explore your workspace using the command line:</p> <pre><code># To list the objects or variables that are in your workspace, type\nls()\n# To remove (delete) an object from the workspace, use function rm():\nrm(x)\n# To remove (delete) all objects from the workspace, type\nrm(list=ls())\n</code></pre>"},{"location":"exercises/#lets-practice-2-create-a-script","title":"Let\u2019s practice 2 - Create a script","text":"<p>R scripts allow you to save all code for further use or reference. For big projects, it is essential to create an R script. To create a script, go to File &gt; New File &gt; R Script. Save it with file name \u201cex1.R\u201d or any other that is suitable for you. Add a comment symbol (#, the pound or hash sign) at the beginning of the first line.</p> <p>Type or paste the following code. Look at the script (before running it).</p> <p>Can you understand each line? What do you expect it to print to the console? Next, run the script and explore RStudio features such as the Workspace (Environment). Run the script line by line. Try both the \u201cRun\u201d button and the keyboard shortcut.  Watch variables appear in the Environment window (top right). Watch what is printed to the console (bottom left window). Does it match your expectation?</p> <pre><code># First Steps and commands, ex. 1  \nw &lt;- 3\nh &lt;- 0.5\narea &lt;- w * h \narea\n</code></pre>"},{"location":"exercises/#packages","title":"Packages","text":"<p>When R is installed for the first time, a set of \u201cbase\u201d packages is installed along the R software. The list of available packages can be viewed in the package Explorer window within RStudio (bottom right \u201cPackages\u201d window). Each package is a bundle of functions designed and created by an author to perform specific, usually related tasks. When working with \u201cnon-standard\u201d data types, eg in bioinformatics or flow cytometry analysis, packages with bioinformatics-related functions need to be installed by the user. </p> <p>Common repositories for packages are CRAN and Bioconductor.</p> <p>Install packages from CRAN with the install.packages() function.</p> <p>To install packages hosted on Bioconductor, we need 2 steps. First, we install a package called BiocManager, that will allow us to have access to the install() function to download Bioconductor packages.</p> <pre><code># Install packages hosted on CRAN: use a function from the utils package:\ninstall.packages(\"stringi\") # stringi is a package for character string manipulations\n\ninstall.packages(\"rmarkdown\") # rmarkdown package that allows to create pdf reports (see day 2)\n\n# Install packages hosted on bioconductor: first install the BiocManager package that is available on CRAN:\ninstall.packages(\"BiocManager\")\n\n# Then use the install() function from the BiocManager package\n# !! This takes time to complete, run it during coffee or lunch break!\n# Install DESeq2:\nBiocManager::install(\"DESeq2\")\n</code></pre> <p>Once a package is installed, its content and functions need to be made accessible to R. library() loads the package for the current session. It is good practice to load all needed packages at the top of a script.</p> <pre><code># My Script\n\nlibrary(limma)  \nlibrary(MASS)  \nlibrary(ggplot2)\n</code></pre> <p>If you run the above code, what is the output on the Console? What does it mean?</p> Answer <p>Packages such as limma are not installed as base packages. They are hosted on Bioconductor and provide functions for RNAseq or microarray data analysis. The error message indicates that these packages were not installed and need to be installed before being able to load them.</p>"},{"location":"exercises/#r-version-and-session-information","title":"R version and session information","text":"<p>R is constantly upgraded by developers, who release a new version of R about every 6 months. Along with R upgrades, packages also get upgrades. From one version to the other of a package, it may happen that the default parameters of functions change. Therefore, it is important to always have in mind which current version of R and packages have been used for any analysis. Print the current R version and versions of attached or loaded packages using:</p> <pre><code># Prints the currently used R version\nR.version.string    \n\n# Print version information about R and all attached or loaded packages\nsessionInfo() \n\n# Print the version of a specific package:\npackageVersion(\"stringi\")\n</code></pre>"},{"location":"exercises/#lets-practice-3","title":"Let\u2019s practice - 3","text":"<p>1) Assign the values 6.7 and 56.3 to variables a and b, respectively.</p> <p>2) Calculate (2a)/b + (ab) and assign the result to variable x. Display the content of x.</p> <p>3) Find out how to compute the square root of variables. Compute the square roots of a and b and of the ratio a/b.</p> <p>4) a) Calculate the logarithm to the base 2 of x (i.e., log2 x).    b) Calculate the natural logarithm of x (i.e., loge x).</p> Answer <pre><code># 1) Assign the values 6.7 and 56.3 to variables \"a\" and \"b\", respectively.\na &lt;- 6.7\nb &lt;- 56.3\n\n# 2) Calculate (2*a)/b + (a*b) and assign the result to variable \"x\". Display the content of \"x\".\nx &lt;- (2*a)/b + a*b\nx\n\n# 3) Find out how to compute the square root of variables. Compute the square roots of \"a\" and \"b\" and of the ratio \"a/b\".\nsqrt(a) #using function sqrt()\nb^0.5 # power 0.5 is the square root\n(a/b)**0.5 # another way of specifying power\n\n# 4) a) Calculate the logarithm to the base 2 of \"x\".\n#   b) Calculate the natural logarithm of \"x\".\nlog2(x) # Function specifically for Log 2. Alternatively: log(x, base=2)\nlog(x)  # If we don't specify the base, default is the natural logarithm. \n</code></pre>"},{"location":"exercises/#lets-practice-4","title":"Let\u2019s practice - 4","text":"<p>1) Create two vectors, vector_a and vector_b, containing values from \u22125 to 5 and from 10 down to 0, respectively.</p> <p>2) Calculate the (element-wise) sum, difference and product between the elements of vector_a and vector_b.</p> <p>3) a) Calculate the sum of elements in vector_a.    b) Calculate the overall sum of elements in both vector_a and vector_b.</p> <p>4) a) Identify the smallest and the largest value in vector_a     b) among both vector_a and vector_b.</p> <p>5) Compute the overall mean of the values among both vector_a and vector_b.</p> <p>Hint: Each task in exercises 1-5 can be performed in a single statement per  vector (the minimum and maximum count as 2 tasks)</p> Answer <pre><code># 1) Create two vectors, \"vector_a\" and \"vector_b\", containing the values from \u22125 to 5 and from 10 down to 0, respectively.\nvector_a &lt;- -5:5\nvector_b &lt;- seq(10,0) # alternatively: vector_b &lt;- c(10,9,8,7,6,5,4,3,2,1,0)\n\n# 2) Calculate the (elementwise) sum, difference and product between the elements of \"vector_a\" and \"vector_b\". \nvector_a + vector_b #sum\nvector_a - vector_b #difference\nvector_a * vector_b #product\n\n# 3) a) Calculate the sum of elements in \"vector_a\"\n#    b) Calculate the overall sum of elements in both  \"vector_a\" and \"vector_b\".\nsum(vector_a)\nsum(vector_a, vector_b) # alternatively : sum(vector_a + vector_b)\n\n# 4) Identify the smallest and the largest value among both \"vector_a\" and \"vector_b\".\nmin(vector_a, vector_b)\nmax(vector_a, vector_b)\n\n# 5) Compute the overall mean of the values among both \"vector_a\" and \"vector_b\"\nmean( c( vector_a, vector_b) ) # mean() works only on a single vector, unlike sum, min and max! \n# Concatenate both vectors (using c() ) before computing the mean\n</code></pre>"},{"location":"exercises/#lets-practice-5","title":"Let\u2019s practice - 5","text":"<p>1) In your script, write the command to load the package \u201cMASS\u201d.</p> <p>2) Write the following command to load the bacteria data set from the package MASS: data(bacteria) # loads the bacteria data set (from MASS)</p> <p>Execute the command. Check: You should have a variable named \u201cbacteria\u201d in your Environment/Workspace.</p> <p>3) What are the names of the columns of the bacteria data.frame ?</p> <p>4) Use [ ] to select rows 100 to 119 of the column \u201cap\u201d .</p> <p>5) Use $ to get the column \u201cweek\u201d and check how many missing values it has.</p> <p>Optional : 6) Count how many rows correspond to a \u201cplacebo\u201d treatment (\u201ctrt\u201d  column) using the comparison operator \u201c==\u201d.</p> Answer <pre><code># 1)Install and load the package MASS (or other CRAN packages).\n# install.packages(\"MASS\")\nlibrary(MASS)\n\n# 2) The following command line loads the bacteria data.frame present in the MASS package. Execute it:\ndata(bacteria)\n?bacteria\n\n# 3) What are the names of the columns of the bacteria data.frame ?\nnames(bacteria)\n\n# 4) Use the [ ] , to select in bacteria rows 100 to 119 in the column \"ap\".\nbacteria[ 100:119 , \"ap\" ]\n\n# 5) Use $ to get the column \"week\" and check how many missing values it has.\nsum(is.na(bacteria$week))\n\n# Optional : 6) use comparison operators to count how many rows correspond to a \u201cplacebo\u201d treatment (\u201ctrt\u201d column).\nsum(bacteria$trt == \"placebo\")\n</code></pre>"},{"location":"exercises/#lets-practice-6","title":"Let\u2019s practice - 6","text":"<p>A clinical dataset from patients with lung cancer is available in the file clinical_data2.csv.</p> <p>The clinical_data2.csv file was generated from the clinical_data.csv source file using the following code:</p> <pre><code>## !! Adapt the path to the path in your own system if you wish to import the data available in file \"clinical_data.csv\"\nclinical_data &lt;- read.csv(\"course_datasets/clinical_data.csv\")\n\n# View the format of the data:\nhead(clinical_data)\n\n# Number of rows and columns:\ndim(clinical_data)\n\n# Column names:\ncolnames(clinical_data)\n\n# Structure of the data:\nstr(clinical_data)\n\n# Convert the gender to a factor and re-order the disease stage:\nclinical_data$gender &lt;- factor(clinical_data$gender)\nclinical_data$stage &lt;- factor(clinical_data$stage, levels = c(\"I\",\"II\",\"III\",\"IV\"))\n\nstr(clinical_data)\n\n# Obtain a summary for each variable:\nsummary(clinical_data)\n\n# View the data in rown number 2:\nclinical_data[2,]\n\n# View the data in column named \"age\":    \nclinical_data[,\"age\"]\n\n# Check the element number 30 of the disease stage column\nclinical_data$stage[30]\n\n# View the data corresponding to patients with stage II disease\nsubset(clinical_data, stage==\"II\")\n\n# View the data corresponding to patients with stage II disease and that are female:\nsubset(clinical_data, stage==\"II\" &amp; gender==\"female\") \n\n# View the data corresponding to patients with stage I or II disease and that are female:\nsubset(clinical_data, (stage==\"I\" | stage==\"II\") &amp; gender==\"female\")\n\ntapply(X=clinical_data$age, INDEX=clinical_data$stage, FUN=min)\n\n# Add a new patient by concatenating rows and assign the result to a new variable called \"clinical_updated\":\nclinical_updated &lt;- rbind(clinical_data,\n                          data.frame(sample_id = \"LC02\", \n                                     collection_date = \"18.02.2021\",\n                                     age=71,\n                                     gender= \"female\",\n                                     stage=\"I\"))\n\n# Create a new treated variable:\ntreated &lt;- rep( c(\"yes\",\"no\"), nrow(clinical_data)/2)\nclinical_mod &lt;- cbind(treated, clinical_data)\n\n# Remove the first column and view the format:\nclinical_orig &lt;- clinical_mod[,-1] \nhead(clinical_orig)\n\nclinical_orig &lt;- clinical_mod[,2:dim(clinical_mod)[2]] \n\n# Export to a new csv file:\nwrite.table(clinical_updated, file=\"course_datasets/clinical_updated.csv\",\n            quote=FALSE, sep=\",\",row.names=FALSE)\n</code></pre> <p>Let\u2019s explore the dataset to see  what it contains. 1) Optional: Open a new script file in R studio, comment it and save it.</p> <p>2) Have a look at the csv file in R studio\u2019s file explorer. What do you need to check in order to be able to read in the file correctly?</p> <p>3) Read the file into R, assign its content to object \u201cclinical_data2\u201d. Examine the object.</p> <p>4) How many observations and variables does the dataset have?</p> <p>5) What is the structure of the dataset? What are the names and classes of the variables?</p> <p>6) Which variables appear to be categorical? Convert them to factors.</p> <p>7) Get the summary statistics of \u201cclinical_data2\u201d</p> Answer <pre><code># A clinical dataset from patients with lung cancer is available in the file clinical_data2.csv. \n# Let's explore the dataset to see  what it contains.\n\n# 1) Open a new script file in R studio, comment it and save it.\n# 2) Have look at the csv file in R studio's file explorer. What do you need to check in order to be able to  read in the file correctly?\n\n# 3) Read the file into R, assign its content to object \"clinical_data2\". Examine the object.\n# Adapt the path to the path in your own system!\nclinical_data2 &lt;- read.csv(\"course_datasets/clinical_data2.csv\")\n\n# 4) How many observations and variables does the dataset have?\ndim(clinical_data2)\n\n# 5) What is the structure of the dataset? What are the names and classes  of the variables?\nstr(clinical_data2)\n\n# 6) Which variables appear to be categorical? Convert them to factors.\n\nclinical_data2$gender &lt;- factor(clinical_data2$gender)\nclinical_data2$stage &lt;- factor(clinical_data2$stage, levels = c(\"I\",\"II\",\"III\",\"IV\"))\nclinical_data2$treatment_status &lt;- factor(clinical_data2$treatment_status)\nclinical_data2$response_to_treatment &lt;- factor(clinical_data2$response_to_treatment,levels = c(\"PD\",\"SD\",\"PR\",\"CR\"))\n\n# 7) Get the summary statistics of \"clinical_data2\"\nsummary(clinical_data2)\n</code></pre>"},{"location":"exercises/#lets-practice-6bis","title":"Let\u2019s practice 6bis","text":"<p>8) Use the function table() to compute the number of samples in  different patient groups. a) How many samples are included of each gender (male, female)? b) How many samples are included per level of response to treatment (PD, SD, PR, CR)? c) Make a 2x2 table gender and level of response to treatment. Hint : try some of the example in the help(table) page.</p> <p>9) Isolate the samples from male patients using subset(). Compute a summary statistics just for the weights of the  subset. Then do the same for the samples from female patients. Export the data of each subgroup to a csv file.</p> <p>10) Compute the means and standard deviations for male and  female patient weights using tapply(). Then do the same by level of response to treatment.</p> Answer <pre><code>  # 8) Use the function table() to compute the number of samples in  different patient groups.\n# Hint : try some of the example in the help(table) page.\n\n# a) How many samples are included of each gender (male, female)? \ntable(clinical_data2$gender)\n\n# b) How many samples are included per level of response to treatment (PD, SD, PR, CR)? \ntable(clinical_data2$response_to_treatment)\n\n# c) Make a 2x2 table gender and level of response to treatment.\ntable(clinical_data2[,c(\"gender\",\"response_to_treatment\")])\n\n# 9) Isolate the samples from male patients using  subset(). \n# Compute a summary statistics just for the weights of the  subset. \n# Then do the same for the samples from female patients. \n# Export the data of each subgroup to a csv file.\n\n# Isolate the samples from male patients\nclinical_data2_male &lt;- subset(clinical_data2, gender==\"male\")\n\n# Compute a summary statistics just for the weights of the  subset\nsummary(clinical_data2_male$weight)\n\n# Export the data to a csv file.\nwrite.table(clinical_data2_male,file = \"course_datasets/clinical_data2_male.csv\",\n      quote=FALSE, \n      sep=\",\",\n      row.names=FALSE)\n\n# Isolate the samples from female patients\nclinical_data2_female &lt;- subset(clinical_data2, gender==\"female\")\n\n# Compute a summary statistics just for the weights of the subset\nsummary(clinical_data2_female$weight)\n\n# Export the data to a csv file.\nwrite.table(clinical_data2_female,file = \"course_datasets/clinical_data2_female.csv\",\n        quote=FALSE, \n        sep=\",\",\n        row.names=FALSE)\n\n# 10) Compute the means and standard deviations for male and female patient weights using tapply(). \n# Then do the same by level of response to treatment.\n\n# by gender\ntapply(clinical_data2$weight, clinical_data2$gender, mean) # mean: by gender\ntapply(clinical_data2$weight, clinical_data2$gender, sd) # standard deviation by gender\n\n# by response to treatment\ntapply(clinical_data2$weight, clinical_data2$response_to_treatment, mean) # mean: by level of response to treatment\ntapply(clinical_data2$weight, clinical_data2$response_to_treatment, sd) # standard deviation by level of response to treatment\n</code></pre> <p>End of Day 1, good job!</p>"},{"location":"links/","title":"Useful links","text":"<p>Here we provide some additional links</p>"},{"location":"links/#crans-introduction-to-r-book","title":"CRAN\u2019s Introduction to R book","text":"<p>https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf</p>"},{"location":"links/#sibs-first-steps-with-r-in-life-sciences-2-day-course","title":"SIB\u2019s First steps with R in Life Sciences - 2-day course","text":"<p>https://github.com/sib-swiss/first-steps-with-R-training/tree/master</p> <p>It includes more on statistics on the second day.</p>"},{"location":"links/#sibs-introduction-to-statistics-with-r-34-day-course","title":"SIB\u2019s Introduction to Statistics with R - 3/4-day course","text":"<p>For R beginners:</p> <p>https://sib-swiss.github.io/Introduction-to-statistics-with-R/</p>"},{"location":"links/#introduction-to-r-for-cancer-scientists","title":"Introduction to R for Cancer Scientists","text":"<p>For R beginners:</p> <p>https://bioinformatics-core-shared-training.github.io/r-intro/index.html</p>"},{"location":"links/#some-tutorials-to-learn-or-practice-r","title":"Some tutorials to learn or practice R","text":"<p>https://support.posit.co/hc/en-us/articles/200552336-Getting-Help-with-R</p> <p>https://r-coder.com/learn-r/</p>"},{"location":"links/#r-for-data-science-book","title":"R for Data Science Book","text":"<p>Book (2nd edition) by Hadley Wickham (a very active R developer), Mine \u00c7etinkaya-Rundel and Garrett Grolemund. The book makes heavy use of the tidyverse, which is a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. ggplot2 is part of the tidyverse packages.</p> <p>https://r4ds.hadley.nz/</p>"},{"location":"links/#ggplot2-tutorial","title":"ggplot2 tutorial","text":"<p>https://ggplot2.tidyverse.org/</p>"},{"location":"links/#r-charts","title":"R-charts","text":"<p>A site that has been created to be a reference for learning how to create charts in R as well as a place to look for inspiration. Code examples to create plots with base R, ggplot2. Color charts with R color name vs HEX equivalent.</p> <p>https://r-charts.com/</p>"},{"location":"links/#r-markdown","title":"R Markdown","text":"<p>A useful resource is RStudio\u2019s R Markdown tutorial.</p> <p>For tweaking your reports, such as chosing different output formats, or hiding or showing the code within the report, we recommend that you consult the R markdown documentation provided in this Definite guide eBook.</p>"},{"location":"links/#cheatsheets","title":"Cheatsheets","text":"<p>Several cheatsheets available for different packages, eg R Markdown, ggplot2, RStudio,\u2026</p>"},{"location":"materials/","title":"Materials","text":""},{"location":"materials/#slides-of-lectures","title":"Slides of lectures","text":""},{"location":"materials/#day-1","title":"Day 1","text":"<p>Download slides - morning</p> <p>Download slides - afternoon</p>"},{"location":"materials/#day-2","title":"Day 2","text":"<p>Download slides - morning</p> <p>Download essential slides - afternoon</p> <p>Download slides - afternoon</p>"},{"location":"materials/#data-for-exercises","title":"Data for exercises","text":""},{"location":"materials/#data-for-exercises-of-day-1-only","title":"Data for exercises of day 1 only","text":"<p>Download course_datasets</p>"},{"location":"materials/#data-for-all-exercises-including-day-2-800-mb-data-size","title":"Data for all exercises, including day 2 (800 Mb data size)","text":"<p>Download from the drive here, using Pwd 54321</p>"},{"location":"precourse/","title":"Precourse preparations","text":""},{"location":"precourse/#r-and-rstudio","title":"R and RStudio","text":""},{"location":"precourse/#technical","title":"Technical","text":"<p>Please, install the latest the version of R, followed by the installation of the free version of RStudio.</p> <p>At some point during the course, we may install R packages from within RStudio. This requires RStudio to access online repositories of packages and download them from the internet. Please ensure that this will not be blocked by firewalls.</p>"}]}